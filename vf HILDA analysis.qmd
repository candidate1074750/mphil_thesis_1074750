---
st---
title: "v2 2024.05.15 analysis"
format: html
editor: visual
---

# 2024.05.29 HILDA analysis

## 0: Set up.

### 0.1 Clearing environment, setting WD, loading packages.

```{r}

# Clearing environment.
rm(list=ls())

# Setting working directory and confirming.
setwd("/Users/candidate/Documents/Ox Dissertation/analysis/HILDA/combined_files")
getwd()

# Calling relevant packages.
if (!require("pacman")) install.packages("pacman")
pacman::p_load(AER, car, catregs, emmeans, fixest, fmsb, here, khb, lattice, lme4, lmtest, marginaleffects, margins, Matrix, modelsummary, nlstools, plm, tidyverse, estimatr, rdrobust, haven, labelled, dagitty, rddensity, knitr, kableExtra, stargazer, broom, eeptools, panelr, plm, zoo, MatchIt, twang, WeightIt, haven, dpm, ggplot2, nlme, MuMIn, RStata, readxl, glmnet, randomForest, DoubleML, mlr3, mlr3learners, mlr3tuning, data.table, sjlabelled, ranger, tidyr, ggplot2, dplyr, readxl, optmatch, texreg, ggpubr)

```

### 0.6 Saving results in R and Stata format.

Clearing environment and reloading data.

```{r}

rm(list=ls())
load("hilda_2.RData")

# Calculating poverty line.
hilda_2 <- hilda_2 %>%
  group_by(wave, inc_unit_size) %>%
  mutate(group_med_inc = median(total_disp_inc, na.rm = TRUE),
         poverty_line2 = group_med_inc * 0.6)

summary(hilda_2$group_med_inc)
summary(hilda_2$poverty_line2)

n_distinct(hilda_2$group_med_inc)
n_distinct(hilda_2$poverty_line2)
summary(hilda_2$group_med_inc)
summary(hilda_2$poverty_line2)

# Above/below poverty line.
hilda_2 <- hilda_2 %>%
  mutate(in_poverty2 = ifelse(total_disp_inc <= poverty_line2, 1, 0))

summary(hilda_2$in_poverty2)

setDT(hilda_2)

hilda_2[, c("disp_inc_lag1", "disp_inc_lag2",
          "num_spells_unemployed_lag1", "num_spells_unemployed_lag2",
          "in_poverty_lag1", "in_poverty_lag2",
          "in_poverty2_lag1", "in_poverty2_lag2") := 
        .(shift(disp_inc, 1L), shift(disp_inc, 2L),
          shift(num_spells_unemployed, 1L), shift(num_spells_unemployed, 2L),
          shift(in_poverty, 1L), shift(in_poverty, 2L), shift(in_poverty2, 1L), shift(in_poverty2, 2L)),
      by = xwaveid]

identical(hilda_2$disp_inc_lag1, hilda_2$disp_inc_lag2)
identical(hilda_2$num_spells_unemployed_lag1, hilda_2$num_spells_unemployed_lag2)
identical(hilda_2$in_poverty_lag1, hilda_2$in_poverty_lag2)
identical(hilda_2$in_poverty2_lag1, hilda_2$in_poverty2_lag2)


```

```{r}

hilda_2 <- select(hilda_2, -matches("\\."))
write_dta(hilda_2, "hilda_2.dta")

summary(hilda_2$hgage)

```

## 1. Variable selection.

### 1.1 LASSO for employment, income, poverty.

```{r}

# Employment.

# Making model matrix.
X4.1e <- model.matrix(num_spells_unemployed ~ sexor_binary_2 + hgage + female + ed_degree + any_children + helth + hhssos + hhstate + married + immigrant, data = hilda_2)
Y4.1e <- hilda_2$num_spells_unemployed
# Excluding hhssos, coupled, fluent_english because of risk for multicollinearity. Will include if either hhsos, married, or mmigrant has coefficient very near 0 in absolute value.

# Running lasso model.
lasso4.1e <- cv.glmnet(X4.1e, Y4.1e, alpha = 1)
coef(lasso4.1e, s = "lambda.min") 

# Exclude hhsos and hhssos.
# Include: sexor_binary_2 + hgage + female + ed_degree + any_children + helth + hhstate + married + immigrant. 

# Income.

# Making model matrix.
X4.1i <- model.matrix(disp_inc ~ sexor_binary_2 + hgage + female + ed_degree + any_children + helth + hhsos + married + immigrant, data = hilda_2)
Y4.1i <- hilda_2$disp_inc
# Excluding hhssos, coupled, fluent_english because of risk for multicollinearity. Will include if either hhsos, married, or mmigrant has coefficient very near 0 in absolute value.

# Running lasso model.
lasso4.1i <- cv.glmnet(X4.1i, Y4.1i, alpha = 1)
coef(lasso4.1i, s = "lambda.min")
# Exclude: hhstate.
# Include: sexor_binary_2 + hgage + female + ed_degree + any_children + helth + hhsos + married + immigrant. 

# Poverty.

# Making model matrix.
X4.1p <- model.matrix(in_poverty ~ sexor_binary_2 + hgage + female + ed_degree + any_children + helth + hhsos + married + immigrant, data = hilda_2)
Y4.1p <- hilda_2$in_poverty
# Excluding hhssos, coupled, fluent_english because of risk for multicollinearity. Will include if either hhsos, married, or mmigrant has coefficient very near 0 in absolute value.

# Running lasso model.
lasso4.1p <- cv.glmnet(X4.1p, Y4.1p, alpha = 1)
coef(lasso4.1p, s = "lambda.min")

# Exclude: hhstate.
# Include: sexor_binary_2 + hgage + female + ed_degree + any_children + helth + hhsos + married + immigrant. 

# Variables with very low coefficients: hgage, hhstate. I think age should still be included -- I'm assuming it has multicollinearity with another variable (such as education, children, or health) that's causing lasso to shrink it.

# Output!

# Extract coefficients from the lasso models at the optimal lambda
coef_unemployed <- as.matrix(coef(lasso4.1e, s = "lambda.min"))
coef_income <- as.matrix(coef(lasso4.1i, s = "lambda.min"))
coef_poverty <- as.matrix(coef(lasso4.1p, s = "lambda.min"))

# Convert to data frames for easy manipulation and label the intercepts
coef_unemployed <- data.frame(coefficient = rownames(coef_unemployed), estimate = coef_unemployed[, 1])
coef_unemployed$coefficient[coef_unemployed$coefficient == "(Intercept)"] <- "Intercept_Unemployed"

coef_income <- data.frame(coefficient = rownames(coef_income), estimate = coef_income[, 1])
coef_income$coefficient[coef_income$coefficient == "(Intercept)"] <- "Intercept_Income"

coef_poverty <- data.frame(coefficient = rownames(coef_poverty), estimate = coef_poverty[, 1])
coef_poverty$coefficient[coef_poverty$coefficient == "(Intercept)"] <- "Intercept_Poverty"

# Merge data frames to have a single table
all_coefs <- merge(merge(coef_unemployed, coef_income, by = "coefficient", suffixes = c("_Unemployed", "_Income")), coef_poverty, by = "coefficient")
names(all_coefs) <- c("Variable", "Unemployed", "Income", "Poverty")

# Display the coefficients using stargazer in HTML format
html_output <- stargazer(all_coefs, type = "html", summary = FALSE, rownames = FALSE, title = "Table 3.4: HILDA LASSO Regression Results", out = "HILDA_Lasso_Results.html")

# Save the HTML output to a file
cat(html_output, file = "lasso_results_labeled.html")


```

### 1.2 Elastic net (combination of LASSO and ridge) for employment, income, and poverty.

```{r}

# Employment.

# Model matrix.
X4.2e <- model.matrix(num_spells_unemployed ~ sexor_binary_2 + hgage + female + ed_degree + any_children + helth + hhsos + married + immigrant, data = hilda_2)
Y4.2e <- hilda_2$num_spells_unemployed
# Excluding hhssos, coupled, fluent_english because of risk for multicollinearity. Will include if either hhsos, married, or mmigrant has coefficient very near 0 in absolute value.

# Running elastic net model.
elastic_net4.2e <- cv.glmnet(X4.2e, Y4.2e, alpha = 0.5) # Alpha = 0.5 for Elastic Net

# Get the coefficients
coef(elastic_net4.2e, s = "lambda.min") # Again, it appear that hhstate should be removed.

# Exclude: hhstate.
# Include: sexor_binary_2 + hgage + female + ed_degree + any_children + helth + hhsos + married + immigrant.

# Income.

# Model matrix.
X4.2i <- model.matrix(disp_inc ~ sexor_binary_2 + hgage + female + ed_degree + any_children + helth + hhsos + married + immigrant, data = hilda_2)
Y4.2i <- hilda_2$disp_inc
# Excluding hhssos, coupled, fluent_english because of risk for multicollinearity. Will include if either hhsos, married, or mmigrant has coefficient very near 0 in absolute value.

# Running elastic net model.
elastic_net4.2i <- cv.glmnet(X4.2i, Y4.2i, alpha = 0.5) # Alpha = 0.5 for Elastic Net

# Get the coefficients
coef(elastic_net4.2i, s = "lambda.min") # Again, it appear that hhstate should be removed.

# Exclude: hhstate.
# Include: sexor_binary_2 + hgage + female + ed_degree + any_children + helth + hhsos + married + immigrant.

# Poverty.

# Model matrix.
X4.2p <- model.matrix(in_poverty ~ sexor_binary_2 + hgage + female + ed_degree + any_children + helth + hhsos + married + immigrant, data = hilda_2)
Y4.2p <- hilda_2$in_poverty
# Excluding hhssos because of risk for multicollinearity. Similarly, excluding fluent_english. Will include if either hhsos or immigrant has coefficient very near 0 in absolute value.

# Running elastic net model.
elastic_net4.2p <- cv.glmnet(X4.2p, Y4.2p, alpha = 0.5) # Alpha = 0.5 for Elastic Net

# Get the coefficients
coef(elastic_net4.2p, s = "lambda.min") # Again, it appear that hhstate should be removed.

# Exclude: hhstate.
# Include: sexor_binary_2 + hgage + female + ed_degree + any_children + helth + hhsos + married + immigrant.

# Output!

# Extract coefficients at optimal lambda
coef_unemployed <- as.matrix(coef(elastic_net4.2e, s = "lambda.min"))
coef_income <- as.matrix(coef(elastic_net4.2i, s = "lambda.min"))
coef_poverty <- as.matrix(coef(elastic_net4.2p, s = "lambda.min"))

# Convert to data frames for easy manipulation and label the intercepts
coef_unemployed <- data.frame(coefficient = rownames(coef_unemployed), estimate = coef_unemployed[, 1])
coef_unemployed$coefficient[coef_unemployed$coefficient == "(Intercept)"] <- "Intercept_Unemployed"

coef_income <- data.frame(coefficient = rownames(coef_income), estimate = coef_income[, 1])
coef_income$coefficient[coef_income$coefficient == "(Intercept)"] <- "Intercept_Income"

coef_poverty <- data.frame(coefficient = rownames(coef_poverty), estimate = coef_poverty[, 1])
coef_poverty$coefficient[coef_poverty$coefficient == "(Intercept)"] <- "Intercept_Poverty"

# Merge data frames to have a single table
all_coefs <- merge(merge(coef_unemployed, coef_income, by = "coefficient", suffixes = c("_Unemployed", "_Income")), coef_poverty, by = "coefficient")
names(all_coefs) <- c("Variable", "Unemployed", "Income", "Poverty")

# Display the coefficients using stargazer in HTML format
html_output <- stargazer(all_coefs, type = "html", summary = FALSE, rownames = FALSE, title = "Table 3.5: HILDA Elastic Net Results", out = "HILDA_Elastic_Net_Results.html")

# Save the HTML output to a file
cat(html_output, file = "elastic_net_results.html")

```

### 1.3 Random Forest (attempt 2) for employment, income, and poverty.

```{r}

# Poverty.

hilda_RFp <- hilda_2 %>%
  select(wave, xwaveid, hhrhid, hhiu, in_poverty, sexor_binary_2, hgage, female, ed_degree, any_children, helth, hhsos, married, immigrant)

View(hilda_RFp) # Confirming results.

# Converting a couple variables to better formats for the RF.
hilda_RFp$hhiu <- as_factor(hilda_RFp$hhiu)
hilda_RFp$xwaveid <- as.numeric(hilda_RFp$xwaveid)
str(hilda_RFp$xwaveid)

# Fit the random forest model
rf_4.3p <- randomForest(in_poverty ~ ., data = hilda_RFp, importance = TRUE, maxnodes = 100)

# Print the variable importance measures
rf_4.3p$importance

# Plot the variable importance
varImpPlot(rf_4.3p)

# sexor_binary_2 actually appears to be the least important.

# Employment.

hilda_RFe <- hilda_2 %>%
  select(wave, xwaveid, hhrhid, hhiu, num_spells_unemployed, sexor_binary_2, hgage, female, ed_degree, any_children, helth, hhsos, married, immigrant)

View(hilda_RFe) # Confirming results.

# Converting a couple variables to better formats for the RF.
hilda_RFe$hhiu <- as_factor(hilda_RFe$hhiu)
hilda_RFe$xwaveid <- as.numeric(hilda_RFe$xwaveid)
str(hilda_RFe$xwaveid)

# Fit the random forest model
rf_4.3e <- randomForest(num_spells_unemployed ~ ., data = hilda_RFe, importance = TRUE, maxnodes = 100)

# Print the variable importance measures
rf_4.3e$importance

# Plot the variable importance
varImpPlot(rf_4.3e)

# any_children doesn't seem to be that relevant to employment status.

# Income.

hilda_RFi <- hilda_2 %>%
  select(wave, xwaveid, hhrhid, hhiu, disp_inc, sexor_binary_2, hgage, female, ed_degree, any_children, helth, hhsos, married, immigrant)

View(hilda_RFi) # Confirming results.

# Converting a couple variables to better formats for the RF.
hilda_RFi$hhiu <- as_factor(hilda_RFi$hhiu)
hilda_RFi$xwaveid <- as.numeric(hilda_RFi$xwaveid)
str(hilda_RFi$xwaveid)

# Fit the random forest model
rf_4.3i <- randomForest(disp_inc ~ ., data = hilda_RFi, importance = TRUE, maxnodes = 100)

# Print the variable importance measures
rf_4.3i$importance

# Plot the variable importance
varImpPlot(rf_4.3i)

# Extract variable importance measures
importance_poverty <- rf_4.3p$importance
importance_employment <- rf_4.3e$importance
importance_income <- rf_4.3i$importance

# Convert to data frames for easy manipulation
importance_poverty_df <- data.frame(Variable = rownames(importance_poverty), Importance_Poverty = importance_poverty[, 1])
importance_employment_df <- data.frame(Variable = rownames(importance_employment), Importance_Employment = importance_employment[, 1])
importance_income_df <- data.frame(Variable = rownames(importance_income), Importance_Income = importance_income[, 1])

```

### 1.4 Presenting variable selection via LASSO, EN, RF results.

```{r}

var_labels <- c(any_children = "Any children (1/0)", 
                ed_degree = "(At least) post secondary degree (1/0)",
                female = "Female (1/0)",
                hhiu = "Household Income Unit",
                hhrhid = "Household ID",
                hhsos = "Urban/Rural (1/0)",
                helth = "Disabled (1/0)",
                hgage = "Age",
                hhstate = "State",
                disp_inc = "Disposable Income",
                immigrant = "Immigrant (1/0)",
                Intercept_Unemployed = "Intercept (Unemployed)",
                Intercept_Unemployed = "Intercept (Employed)",
                married = "Married (1/0)",
                sexor_binary_2 = "Lesbian, Gay, or Bisexual (1/0)",
                wave = "Survey Wave",
                xwaveid = "Cross-Wave ID")

# Merge lasso, elastic net, and random forest coefficients for employment
employment_coefs <- merge(merge(coef_unemployed, 
                                 subset(coef_unemployed, select = c("coefficient", "estimate")),
                                 by = "coefficient", suffixes = c("_Lasso", "_ElasticNet")),
                           subset(importance_employment_df, select = c("Variable", "Importance_Employment")),
                           by.x = "coefficient", by.y = "Variable", all = TRUE)
names(employment_coefs) <- c("Variable", "Lasso", "ElasticNet", "RandomForest")

# Display the employment coefficients using stargazer in HTML format
html_output <- stargazer(employment_coefs, type = "html", summary = FALSE, rownames = FALSE, 
                         label = var_labels,
                         title = "HILDA Employment Coefficients: Lasso, Elastic Net, and Random Forest",
                         out = "HILDA_employment_coefficients.html")
cat(html_output, file = "HILDA_employment_coefficients.html")

# Coefficient on hhsos is order of magnitude smaller than next smallest in lasso and EN. RF also suggests a small effect.

# Merge lasso, elastic net, and random forest coefficients for income
income_coefs <- merge(merge(coef_income, 
                            subset(coef_income, select = c("coefficient", "estimate")),
                            by = "coefficient", suffixes = c("_Lasso", "_ElasticNet")),
                      subset(importance_income_df, select = c("Variable", "Importance_Income")),
                      by.x = "coefficient", by.y = "Variable", all = TRUE)
names(income_coefs) <- c("Variable", "Lasso", "ElasticNet", "RandomForest")

# Display the income coefficients using stargazer in HTML format
html_output <- stargazer(income_coefs, type = "html", summary = FALSE, rownames = FALSE, 
                         label = var_labels,
                         title = "HILDA Income Coefficients: Lasso, Elastic Net, and Random Forest",
                         out = "HILDA_income_coefficients.html")
cat(html_output, file = "HILDA_income_coefficients.html")

# Exclude nothing.

# Merge lasso, elastic net, and random forest coefficients for poverty status
poverty_coefs <- merge(merge(coef_poverty, 
                             subset(coef_poverty, select = c("coefficient", "estimate")),
                             by = "coefficient", suffixes = c("_Lasso", "_ElasticNet")),
                       subset(importance_poverty_df, select = c("Variable", "Importance_Poverty")),
                       by.x = "coefficient", by.y = "Variable", all = TRUE)
names(poverty_coefs) <- c("Variable", "Lasso", "ElasticNet", "RandomForest")

# Display the poverty status coefficients using stargazer in HTML format
html_output <- stargazer(poverty_coefs, type = "html", summary = FALSE, rownames = FALSE, 
                         label = var_labels,
                         title = "HILDA Poverty Status Coefficients: Lasso, Elastic Net, and Random Forest",
                         out = "HILDA_poverty_coefficients.html")
cat(html_output, file = "HILDA_poverty_coefficients.html")

# Exclude urban/rural and immigrant

```

## 2: Matching.

### 2.1: Propensity score matching.

```{r}

# Propensity score matching.
ps_matches <- matchit(sexor_binary_2 ~ female + hgage, data = hilda_2, method = "nearest")

# Checking propensity scores.
summary(ps_matches)

# Exracting matched dataset.
ps_matches <- match.data(ps_matches)

# 641 distinct people.
n_distinct(ps_matches$xwaveid)

```

### 2.2: IPTW weighting.

```{r}

# Step 1: Generate IPTW weights using the weightit function
ipt_matches <- weightit(sexor_binary_2 ~ female + hgage, data = hilda_2, method = "ps", estimand = "ATE")

# Step 2: Check IPTW scores
summary(ipt_matches)

# Step 3: Extract IPTW weights
ipt_weights <- ipt_matches$weights

# Step 4: Add IPTW weights to the hilda_2 dataset
hilda_2$ipt_weights <- ipt_weights
summary(hilda_2$ipt_weights)
hist(hilda_2$ipt_weights)

# Step 5: Scale, normalize, trim, and re-normalize the weights
# Scaling and normalizing
sum_weights <- sum(hilda_2$ipt_weights)
hilda_2$scaled_normalized_ipt_weights <- hilda_2$ipt_weights / sum_weights * nrow(hilda_2)
summary(hilda_2$scaled_normalized_ipt_weights)

# Trimming the weights
threshold <- quantile(hilda_2$scaled_normalized_ipt_weights, 0.95)
hilda_2$trimmed_ipt_weights <- pmin(hilda_2$scaled_normalized_ipt_weights, threshold)

# Re-normalizing the weights
hilda_2$final_ipt_weights <- hilda_2$trimmed_ipt_weights / sum(hilda_2$trimmed_ipt_weights) * nrow(hilda_2)
summary(hilda_2$final_ipt_weights)


```

## 3: Descriptive statistics and DAGs.

```{r}

table(hilda_2$sexor_binary_2)

hilda_2 <- hilda_2 %>%
  mutate(q_man = ifelse(hilda_2$sexor_binary_2 == 1 & hilda_2$sex == 1, 1, 0)) %>%
  mutate(q_woman = ifelse(hilda_2$sexor_binary_2 == 1 & hilda_2$sex == 2, 1, 0))

table(hilda_2$q_man)
table(hilda_2$q_woman)

hilda_2$q_all[hilda_2$q_man != 1 & hilda_2$q_woman != 1] <- 0
hilda_2$q_all[hilda_2$q_man == 1] <- 1
hilda_2$q_all[hilda_2$q_woman == 1] <- 2
table(hilda_2$q_all)

hilda2men <- hilda_2 %>%
  filter(sex == 1)
hilda2women <- hilda_2 %>%
  filter(sex == 2)


```

### 3.0 Formula and variable list.

```{r}

# Function to calculate proportions, means, and conduct tests
calc_stats <- function(data, var) {
  if (is.numeric(data[[var]])) {
    # Perform t-test for numeric variables
    test_result <- t.test(data[[var]] ~ data$sexor_binary_2)
    estimate <- data %>%
      group_by(sexor_binary_2) %>%
      summarize(
        mean = mean(get(var), na.rm = TRUE),
        std_error = sd(get(var), na.rm = TRUE) / sqrt(n())
      )
    estimate <- estimate %>%
      mutate(
        estimate_se = paste0(round(mean, 4), " (", round(std_error, 4), ")")
      ) %>%
      pivot_wider(
        names_from = sexor_binary_2,
        values_from = estimate_se,
        names_glue = "{sexor_binary_2}"
      ) %>%
      mutate(
        p_value = test_result$p.value
      )
  } else {
    # Perform proportion test for categorical variables
    test_result <- prop.test(table(data[[var]], data$sexor_binary_2))
    estimate <- data %>%
      group_by(sexor_binary_2) %>%
      summarize(
        proportion = mean(get(var), na.rm = TRUE),
        std_error = sqrt(proportion * (1 - proportion) / n())
      )
    estimate <- estimate %>%
      mutate(
        estimate_se = paste0(round(proportion, 4), " (", round(std_error, 4), ")")
      ) %>%
      pivot_wider(
        names_from = sexor_binary_2,
        values_from = estimate_se,
        names_glue = "{sexor_binary_2}"
      ) %>%
      mutate(
        p_value = test_result$p.value
      )
  }
  estimate %>%
    mutate(
      significance = case_when(
        p_value < 0.001 ~ "***",
        p_value < 0.01 ~ "**",
        p_value < 0.05 ~ "*",
        TRUE ~ ""
      )
    ) %>%
    select(`0`, `1`, significance) %>%
    rename(`Non-LGB` = `0`, `LGB` = `1`)
}

# Calculate statistics for each variable
variables <- c("female", "hgage", "inc_unit_size", "any_children", "helth", "immigrant", "ed_degree", "ed_hs", "urban", "married", "unemployed", "ever_unemployed", "num_spells_unemployed", "disp_inc_2", "in_poverty", "in_poverty2", "soc_ad", "econ_ad")
variable_names <- c("Female", "Age", "Household size", "Any children", "Disabled", "Immigrant", "Post-secondary degree (at least)", "Secondary degree (at least)", "Live in urban area", "Married", "Currently unemployed", "Ever unemployed", "Number spells unemployed", "Disposable income", "Experiencing poverty", "Experiencing poverty, definition 2", "Decile index of neighborhood socioeconomic advantage", "Decile index of neighborhood economic advantage")

```

### 3.1 Unweighted, full sample.

```{r}

# Unweighted, full sample.
stats_list <- lapply(1:length(variables), function(i) {
  calc_stats(hilda_2, variables[i]) %>% mutate(Variable = variable_names[i])
})

# Combine all statistics into one table
stats_table <- bind_rows(stats_list) %>%
  select(Variable, `Non-LGB`, `LGB`, significance)

# Calculate sample size
sample_size <- hilda_2 %>%
  group_by(sexor_binary_2) %>%
  summarize(count = n()) %>%
  pivot_wider(names_from = sexor_binary_2, values_from = count) %>%
  mutate(Variable = "Sample Size", `Non-LGB` = as.character(`0`), `LGB` = as.character(`1`), significance = "") %>%
  select(Variable, `Non-LGB`, `LGB`, significance)

# Add sample size to the stats table
stats_table <- bind_rows(stats_table, sample_size)

# Combine rows with the same 'Variable' and 'significance'
combined_stats_table <- stats_table %>%
  group_by(Variable, significance) %>%
  summarise(
    `Non-LGB` = coalesce(first(`Non-LGB`), last(`Non-LGB`)),
    `LGB` = coalesce(first(`LGB`), last(`LGB`))
  ) %>%
  ungroup() %>%
  # Keep the order of rows and columns as specified
  arrange(factor(Variable, levels = unique(stats_table$Variable))) %>%
  select(Variable, `Non-LGB`, `LGB`, significance)

# View the combined statistics table
print(combined_stats_table)

# Present the table using stargazer
stargazer(
  combined_stats_table,
  type = "html",
  out = "HILDA_descriptive_stats.html",
  summary = FALSE,
  rownames = FALSE,
  align = TRUE,
  title = "HILDA descriptive statistics, all waves",
  column.labels = c("Characteristics", "Non-LGB", "LGB", ""),
  digits = 4
)

```

xx

```{r}

# Function to calculate proportions, means, and conduct tests
calc_stats <- function(data, var) {
  if (is.numeric(data[[var]])) {
    # Perform t-test for numeric variables
    test_result <- t.test(data[[var]] ~ data$q_man)
    estimate <- data %>%
      group_by(q_man) %>%
      summarize(
        mean = mean(get(var), na.rm = TRUE),
        std_error = sd(get(var), na.rm = TRUE) / sqrt(n())
      )
    estimate <- estimate %>%
      mutate(
        estimate_se = paste0(round(mean, 4), " (", round(std_error, 4), ")")
      ) %>%
      pivot_wider(
        names_from = q_man,
        values_from = estimate_se,
        names_glue = "{q_man}"
      ) %>%
      mutate(
        p_value = test_result$p.value
      )
  } else {
    # Perform proportion test for categorical variables
    test_result <- prop.test(table(data[[var]], data$q_man))
    estimate <- data %>%
      group_by(q_man) %>%
      summarize(
        proportion = mean(get(var), na.rm = TRUE),
        std_error = sqrt(proportion * (1 - proportion) / n())
      )
    estimate <- estimate %>%
      mutate(
        estimate_se = paste0(round(proportion, 4), " (", round(std_error, 4), ")")
      ) %>%
      pivot_wider(
        names_from = q_man,
        values_from = estimate_se,
        names_glue = "{q_man}"
      ) %>%
      mutate(
        p_value = test_result$p.value
      )
  }
  estimate %>%
    mutate(
      significance = case_when(
        p_value < 0.001 ~ "***",
        p_value < 0.01 ~ "**",
        p_value < 0.05 ~ "*",
        TRUE ~ ""
      )
    ) %>%
    select(`0`, `1`, significance) %>%
    rename(`Non-GB Man` = `0`, `GB Man` = `1`)
}

# Calculate statistics for each variable
variables <- c("hgage", "inc_unit_size", "any_children", "helth", "immigrant", "ed_degree", "ed_hs", "urban", "married", "unemployed", "ever_unemployed", "num_spells_unemployed", "disp_inc_2", "in_poverty", "in_poverty2", "soc_ad", "econ_ad")
variable_names <- c("Age", "Household size", "Any children", "Disabled", "Immigrant", "Post-secondary degree (at least)", "Secondary degree (at least)", "Live in urban area", "Married", "Currently unemployed", "Ever unemployed", "Number spells unemployed", "Disposable income", "Experiencing poverty", "Experiencing poverty, definition 2", "Decile index of neighborhood socioeconomic advantage", "Decile index of neighborhood economic advantage")

# Unweighted, full sample
stats_list <- lapply(1:length(variables), function(i) {
  calc_stats(hilda2men, variables[i]) %>% mutate(Variable = variable_names[i])
})

# Combine all statistics into one table
stats_table <- bind_rows(stats_list) %>%
  select(Variable, `Non-GB Man`, `GB Man`, significance)

# Calculate sample size
sample_size <- hilda2men %>%
  group_by(q_man) %>%
  summarize(count = n()) %>%
  pivot_wider(names_from = q_man, values_from = count) %>%
  mutate(Variable = "Sample Size", `Non-GB Man` = as.character(`0`), `GB Man` = as.character(`1`), significance = "") %>%
  select(Variable, `Non-GB Man`, `GB Man`, significance)

# Add sample size to the stats table
stats_table <- bind_rows(stats_table, sample_size)

# Combine rows with the same 'Variable' and 'significance'
combined_stats_table <- stats_table %>%
  group_by(Variable, significance) %>%
  summarise(
    `Non-GB Man` = coalesce(first(`Non-GB Man`), last(`Non-GB Man`)),
    `GB Man` = coalesce(first(`GB Man`), last(`GB Man`))
  ) %>%
  ungroup() %>%
  # Keep the order of rows and columns as specified
  arrange(factor(Variable, levels = unique(stats_table$Variable))) %>%
  select(Variable, `Non-GB Man`, `GB Man`, significance)

# View the combined statistics table
print(combined_stats_table)

# Present the table using stargazer
stargazer(
  combined_stats_table,
  type = "html",
  out = "hilda_men_descriptive_stats.html",
  summary = FALSE,
  rownames = FALSE,
  align = TRUE,
  title = "HILDA descriptive statistics, men only, all waves",
  column.labels = c("Characteristics", "Non-GB Man", "GB Man", ""),
  digits = 4
)

```

xx

```{r}

# Function to calculate proportions, means, and conduct tests
calc_stats <- function(data, var) {
  if (is.numeric(data[[var]])) {
    # Perform t-test for numeric variables
    test_result <- t.test(data[[var]] ~ data$q_woman)
    estimate <- data %>%
      group_by(q_woman) %>%
      summarize(
        mean = mean(get(var), na.rm = TRUE),
        std_error = sd(get(var), na.rm = TRUE) / sqrt(n())
      )
    estimate <- estimate %>%
      mutate(
        estimate_se = paste0(round(mean, 4), " (", round(std_error, 4), ")")
      ) %>%
      pivot_wider(
        names_from = q_woman,
        values_from = estimate_se,
        names_glue = "{q_woman}"
      ) %>%
      mutate(
        p_value = test_result$p.value
      )
  } else {
    # Perform proportion test for categorical variables
    test_result <- prop.test(table(data[[var]], data$q_woman))
    estimate <- data %>%
      group_by(q_woman) %>%
      summarize(
        proportion = mean(get(var), na.rm = TRUE),
        std_error = sqrt(proportion * (1 - proportion) / n())
      )
    estimate <- estimate %>%
      mutate(
        estimate_se = paste0(round(proportion, 4), " (", round(std_error, 4), ")")
      ) %>%
      pivot_wider(
        names_from = q_woman,
        values_from = estimate_se,
        names_glue = "{q_woman}"
      ) %>%
      mutate(
        p_value = test_result$p.value
      )
  }
  estimate %>%
    mutate(
      Significance = case_when(
        p_value < 0.001 ~ "***",
        p_value < 0.01 ~ "**",
        p_value < 0.05 ~ "*",
        TRUE ~ ""
      )
    ) %>%
    select(`0`, `1`, Significance) %>%
    rename(`Non-LB Woman` = `0`, `LB Woman` = `1`)
}

# Calculate statistics for each variable
variables <- c("hgage", "inc_unit_size", "any_children", "helth", "immigrant", "ed_degree", "ed_hs", "urban", "married", "unemployed", "ever_unemployed", "num_spells_unemployed", "disp_inc_2", "in_poverty", "in_poverty2", "soc_ad", "econ_ad")
variable_names <- c("Age", "Household size", "Any children", "Disabled", "Immigrant", "Post-secondary degree (at least)", "Secondary degree (at least)", "Live in urban area", "Married", "Currently unemployed", "Ever unemployed", "Number spells unemployed", "Disposable income", "Experiencing poverty", "Experiencing poverty, definition 2", "Decile index of neighborhood socioeconomic advantage", "Decile index of neighborhood economic advantage")

# Unweighted, full sample
stats_list <- lapply(1:length(variables), function(i) {
  calc_stats(hilda2women, variables[i]) %>% mutate(Variable = variable_names[i])
})

# Combine all statistics into one table
stats_table <- bind_rows(stats_list) %>%
  select(Variable, `Non-LB Woman`, `LB Woman`, Significance)

# Calculate sample size
sample_size <- hilda2women %>%
  group_by(q_woman) %>%
  summarize(count = n()) %>%
  pivot_wider(names_from = q_woman, values_from = count) %>%
  mutate(Variable = "Sample Size", `Non-LB Woman` = as.character(`0`), `LB Woman` = as.character(`1`), Significance = "") %>%
  select(Variable, `Non-LB Woman`, `LB Woman`, Significance)

# Add sample size to the stats table
stats_table <- bind_rows(stats_table, sample_size)

# Combine rows with the same 'Variable' and 'Significance'
combined_stats_table <- stats_table %>%
  group_by(Variable, Significance) %>%
  summarise(
    `Non-LB Woman` = coalesce(first(`Non-LB Woman`), last(`Non-LB Woman`)),
    `LB Woman` = coalesce(first(`LB Woman`), last(`LB Woman`))
  ) %>%
  ungroup() %>%
  # Keep the order of rows and columns as specified
  arrange(factor(Variable, levels = unique(stats_table$Variable))) %>%
  select(Variable, `Non-LB Woman`, `LB Woman`, Significance)

# View the combined statistics table
print(combined_stats_table)

# Present the table using stargazer
stargazer(
  combined_stats_table,
  type = "html",
  out = "hilda_women_descriptive_stats.html",
  summary = FALSE,
  rownames = FALSE,
  align = TRUE,
  title = "HILDA descriptive statistics, women only, all waves",
  column.labels = c("Characteristics", "Non-LB Woman", "LB Woman", ""),
  digits = 4
)

```

### 3.2 Unweighted, final wave.

```{r}

# Unweighted, final wave.

hilda_wave21 <- hilda_2 %>% filter(wave == 21)

stats_list <- lapply(1:length(variables), function(i) {
  calc_stats(hilda_wave21, variables[i]) %>% mutate(Variable = variable_names[i])
})

# Combine all statistics into one table
stats_table <- bind_rows(stats_list) %>%
  select(Variable, `Non-LGB`, `LGB`, significance)

# Calculate sample size
sample_size <- hilda_wave21 %>%
  group_by(sexor_binary_2) %>%
  summarize(count = n()) %>%
  pivot_wider(names_from = sexor_binary_2, values_from = count) %>%
  mutate(Variable = "Sample Size", `Non-LGB` = as.character(`0`), `LGB` = as.character(`1`), significance = "") %>%
  select(Variable, `Non-LGB`, `LGB`, significance)

# Add sample size to the stats table
stats_table <- bind_rows(stats_table, sample_size)

# Combine rows with the same 'Variable' and 'significance'
combined_stats_table <- stats_table %>%
  group_by(Variable, significance) %>%
  summarise(
    `Non-LGB` = coalesce(first(`Non-LGB`), last(`Non-LGB`)),
    `LGB` = coalesce(first(`LGB`), last(`LGB`))
  ) %>%
  ungroup() %>%
  # Keep the order of rows and columns as specified
  arrange(factor(Variable, levels = unique(stats_table$Variable))) %>%
  select(Variable, `Non-LGB`, `LGB`, significance)

# View the combined statistics table
print(combined_stats_table)

# Present the table using stargazer
stargazer(
  combined_stats_table,
  type = "html",
  out = "HILDA_descriptive_stats_21.html",
  summary = FALSE,
  rownames = FALSE,
  align = TRUE,
  title = "HILDA descriptive statistics, wave 21",
  column.labels = c("Characteristics", "Non-LGB", "LGB", ""),
  digits = 4
)

```

### 3.3 P-score matched.

```{r}

# Propensity score matched.

stats_list <- lapply(1:length(variables), function(i) {
  calc_stats(ps_matches, variables[i]) %>% mutate(Variable = variable_names[i])
})

# Combine all statistics into one table
stats_table <- bind_rows(stats_list) %>%
  select(Variable, `Non-LGB`, `LGB`, significance)

# Calculate sample size
sample_size <- ps_matches %>%
  group_by(sexor_binary_2) %>%
  summarize(count = n()) %>%
  pivot_wider(names_from = sexor_binary_2, values_from = count) %>%
  mutate(Variable = "Sample Size", `Non-LGB` = as.character(`0`), `LGB` = as.character(`1`), significance = "") %>%
  select(Variable, `Non-LGB`, `LGB`, significance)

# Add sample size to the stats table
stats_table <- bind_rows(stats_table, sample_size)

# Combine rows with the same 'Variable' and 'significance'
combined_stats_table <- stats_table %>%
  group_by(Variable, significance) %>%
  summarise(
    `Non-LGB` = coalesce(first(`Non-LGB`), last(`Non-LGB`)),
    `LGB` = coalesce(first(`LGB`), last(`LGB`))
  ) %>%
  ungroup() %>%
  # Keep the order of rows and columns as specified
  arrange(factor(Variable, levels = unique(stats_table$Variable))) %>%
  select(Variable, `Non-LGB`, `LGB`, significance)

# View the combined statistics table
print(combined_stats_table)

# Present the table using stargazer
stargazer(
  combined_stats_table,
  type = "html",
  out = "HILDA_descriptive_stats_pscore.html",
  summary = FALSE,
  rownames = FALSE,
  align = TRUE,
  title = "HILDA balance of characteristics between non-LGB and LGB People, Propensity Score Matching",
  column.labels = c("Characteristics", "Non-LGB", "LGB", "Significance"),
  digits = 4
)

```

### 3.4 DAGs.

## 4: Employment.

```{r}

hilda_2 <- pdata.frame(hilda_2, index = c("xwaveid", "wave"))
isid(hilda_2, vars = c("xwaveid", "wave"), verbose = FALSE)

```

### 4.1: Pooled, between, fixed, and random effects.

#### 4.1.1: Regular.

```{r}

# Pooling.
plm4.1p <- plm(num_spells_unemployed ~ num_spells_unemployed_lag1 + num_spells_unemployed_lag2 + sexor_binary_2 + hgage + female + ed_degree + any_children + helth + hhstate + married + immigrant, data = hilda_2, model = "pooling")
summary(plm4.1p)

# Between.
plm4.1b <- plm(num_spells_unemployed ~ num_spells_unemployed_lag1 + num_spells_unemployed_lag2 + sexor_binary_2 + hgage + female + ed_degree + any_children + helth + hhstate + married + immigrant, data = hilda_2, model = "between")
summary(plm4.1b)

# Fixed.
plm4.1f <- plm(num_spells_unemployed ~ num_spells_unemployed_lag1 + num_spells_unemployed_lag2 + sexor_binary_2 + hgage + ed_degree + any_children + helth + hhstate + married, data = hilda_2, model = "within", weights = lnwtrp)
summary(plm4.1f)

# Random.
plm4.1r <- plm(num_spells_unemployed ~ num_spells_unemployed_lag1 + num_spells_unemployed_lag2 + sexor_binary_2 + hgage + female + ed_degree + any_children + helth + hhstate + married + immigrant, data = hilda_2, model = "random", weights = lnwtrp)
summary(plm4.1r)

# Hausman test.
hausman4.1 <- phtest(plm4.1f, plm4.1r)
hausman4.1 # Shouldn't use random.

# Employment: pooled, between, fixed, and random effects.
stargazer(plm4.1p, plm4.1b, plm4.1f, plm4.1r,
          type = "html",
          out = "employment411.html",
          title = "HILDA Employment, All Sexes",
          align = TRUE,
          keep.stat = c("n", "rsq", "adj.rsq"),
          no.space = TRUE)

# Pooling.
plm4.1pM <- plm(num_spells_unemployed ~ num_spells_unemployed_lag1 + num_spells_unemployed_lag2 + q_man + hgage + ed_degree + any_children + helth + hhstate + married + immigrant, data = hilda_2, model = "pooling")
summary(plm4.1pM)

# Between.
plm4.1bM <- plm(num_spells_unemployed ~ num_spells_unemployed_lag1 + num_spells_unemployed_lag2 + q_man + hgage + ed_degree + any_children + helth + hhstate + married + immigrant, data = hilda_2, model = "between")
summary(plm4.1bM)

# Fixed.
plm4.1fM <- plm(num_spells_unemployed ~ num_spells_unemployed_lag1 + num_spells_unemployed_lag2 + q_man + hgage + ed_degree + any_children + helth + hhstate + married, data = hilda_2, model = "within", weights = lnwtrp)
summary(plm4.1fM)

# Random.
plm4.1rM <- plm(num_spells_unemployed ~ num_spells_unemployed_lag1 + num_spells_unemployed_lag2 + q_man + hgage + ed_degree + any_children + helth + hhstate + married + immigrant, data = hilda_2, model = "random", weights = lnwtrp)
summary(plm4.1rM)

# Hausman test.
hausman4.1M <- phtest(plm4.1fM, plm4.1rM)
hausman4.1M # Shouldn't use random.

# Employment: pooled, between, fixed, and random effects.
stargazer(plm4.1pM, plm4.1bM, plm4.1fM, plm4.1rM,
          type = "html",
          out = "employment411M.html",
          title = "HILDA Employment, Male",
          align = TRUE,
          keep.stat = c("n", "rsq", "adj.rsq"),
          no.space = TRUE)

# Pooling.
plm4.1pF <- plm(num_spells_unemployed ~ num_spells_unemployed_lag1 + num_spells_unemployed_lag2 + q_woman + hgage + ed_degree + any_children + helth + hhstate + married + immigrant, data = hilda_2, model = "pooling")
summary(plm4.1pF)

# Between.
plm4.1bF <- plm(num_spells_unemployed ~ num_spells_unemployed_lag1 + num_spells_unemployed_lag2 + q_woman + hgage + ed_degree + any_children + helth + hhstate + married + immigrant, data = hilda_2, model = "between")
summary(plm4.1bF)

# Fixed.
plm4.1fF <- plm(num_spells_unemployed ~ num_spells_unemployed_lag1 + num_spells_unemployed_lag2 + q_woman + hgage + ed_degree + any_children + helth + hhstate + married, data = hilda_2, model = "within", weights = lnwtrp)
summary(plm4.1fF)

# Random.
plm4.1rF <- plm(num_spells_unemployed ~ num_spells_unemployed_lag1 + num_spells_unemployed_lag2 + q_woman + hgage + ed_degree + any_children + helth + hhstate + married + immigrant, data = hilda_2, model = "random", weights = lnwtrp)
summary(plm4.1rF)

# Hausman test.
hausman4.1F <- phtest(plm4.1fF, plm4.1rF)
hausman4.1F # Shouldn't use random.

# Employment: pooled, between, fixed, and random effects.
stargazer(plm4.1pF, plm4.1bF, plm4.1fF, plm4.1rF,
          type = "html",
          out = "employment411F.html",
          title = "HILDA Employment, Female",
          align = TRUE,
          keep.stat = c("n", "rsq", "adj.rsq"),
          no.space = TRUE)

# Combine models for all sexes, male, and female
htmlreg(list(plm4.1p, plm4.1b, plm4.1f, plm4.1r,
             plm4.1pM, plm4.1bM, plm4.1fM, plm4.1rM,
             plm4.1pF, plm4.1bF, plm4.1fF, plm4.1rF),
        file = "employment_combined.html",
        title = "Table 4.1: HILDA Employment: All Sexes, Male, and Female",
        caption = "HILDA Employment: All Sexes, Male, and Female",
        caption.above = TRUE,
        label = "tab:employment_combined",
        custom.model.names = c("Pooled", "Between", "Fixed", "Random",
                               "Pooled (M)", "Between (M)", "Fixed (M)", "Random (M)",
                               "Pooled (F)", "Between (F)", "Fixed (F)", "Random (F)"),
        custom.coef.map = list("num_spells_unemployed_lag1" = "Unemployment Spells (Lag 1)",
                               "num_spells_unemployed_lag2" = "Unemployment Spells (Lag 2)",
                               "sexor_binary_2" = "Sexual Orientation (Binary)",
                               "hgage" = "Age",
                               "female" = "Female",
                               "ed_degree" = "Education Degree",
                               "any_children" = "Any Children",
                               "helth" = "Health",
                               "hhstate" = "Household State",
                               "married" = "Married",
                               "immigrant" = "Immigrant",
                               "q_man" = "Male",
                               "q_woman" = "Female"),
        include.rsquared = TRUE,
        include.adjrs = TRUE,
        include.nobs = TRUE,
        single.row = FALSE)

```

#### 4.1.2: PS matched.

```{r}

# Pooling.
plm4.1ps_p <- plm(num_spells_unemployed ~ num_spells_unemployed_lag1 + num_spells_unemployed_lag2 + sexor_binary_2 + hgage + female + ed_degree + any_children + helth + hhstate + married + immigrant, data = ps_matches, model = "pooling")
summary(plm4.1ps_p)

# Between.
plm4.1ps_b <- plm(num_spells_unemployed ~ num_spells_unemployed_lag1 + num_spells_unemployed_lag2 + sexor_binary_2 + hgage + female + ed_degree + any_children + helth + hhstate + married + immigrant, data = ps_matches, model = "between")
summary(plm4.1ps_b)

# Fixed.
plm4.1ps_f <- plm(num_spells_unemployed ~ num_spells_unemployed_lag1 + num_spells_unemployed_lag2 + sexor_binary_2 + hgage + ed_degree + any_children + helth + hhstate + married, data = ps_matches, model = "within", weights = lnwtrp)
summary(plm4.1ps_f)

# Random.
plm4.1ps_r <- plm(num_spells_unemployed ~ num_spells_unemployed_lag1 + num_spells_unemployed_lag2 + sexor_binary_2 + hgage + female + ed_degree + any_children + helth + hhstate + married + immigrant, data = ps_matches, model = "random", weights = lnwtrp)
summary(plm4.1ps_r)

# Hausman test.
hausman4.1_ps <- phtest(plm4.1ps_f, plm4.1ps_r)
hausman4.1_ps # Shouldn't use random.

# PS matched: pooled, between, fixed, and random effects.
stargazer(plm4.1ps_p, plm4.1ps_b, plm4.1ps_f, plm4.1ps_r,
          type = "html",
          out = "employment412.html",
          title = "HILDA Employment: propensity score matched pooled, between, fixed, and random effects",
          align = TRUE,
          keep.stat = c("n", "rsq", "adj.rsq"),
          no.space = TRUE)

# Pooling.
plm4.1ps_pM <- plm(num_spells_unemployed ~ num_spells_unemployed_lag1 + num_spells_unemployed_lag2 + q_man + hgage + ed_degree + any_children + helth + hhstate + married + immigrant, data = ps_matches, model = "pooling")
summary(plm4.1ps_pM)

# Between.
plm4.1ps_bM <- plm(num_spells_unemployed ~ num_spells_unemployed_lag1 + num_spells_unemployed_lag2 + q_man + hgage + ed_degree + any_children + helth + hhstate + married + immigrant, data = ps_matches, model = "between")
summary(plm4.1ps_bM)

# Fixed.
plm4.1ps_fM <- plm(num_spells_unemployed ~ num_spells_unemployed_lag1 + num_spells_unemployed_lag2 + q_man + hgage + ed_degree + any_children + helth + hhstate + married, data = ps_matches, model = "within", weights = lnwtrp)
summary(plm4.1ps_fM)

# Random.
plm4.1ps_rM <- plm(num_spells_unemployed ~ num_spells_unemployed_lag1 + num_spells_unemployed_lag2 + q_man + hgage + ed_degree + any_children + helth + hhstate + married + immigrant, data = ps_matches, model = "random", weights = lnwtrp)
summary(plm4.1ps_rM)

# Hausman test.
hausman4.1_psM <- phtest(plm4.1ps_fM, plm4.1ps_rM)
hausman4.1_psM # Shouldn't use random.

# PS matched: pooled, between, fixed, and random effects.
stargazer(plm4.1ps_pM, plm4.1ps_bM, plm4.1ps_fM, plm4.1ps_rM,
          type = "html",
          out = "employment412M.html",
          title = "HILDA Employment: propensity score matched, Males",
          align = TRUE,
          keep.stat = c("n", "rsq", "adj.rsq"),
          no.space = TRUE)

# Pooling.
plm4.1ps_pF <- plm(num_spells_unemployed ~ num_spells_unemployed_lag1 + num_spells_unemployed_lag2 + q_woman + hgage + ed_degree + any_children + helth + hhstate + married + immigrant, data = ps_matches, model = "pooling")
summary(plm4.1ps_pF)

# Between.
plm4.1ps_bF <- plm(num_spells_unemployed ~ num_spells_unemployed_lag1 + num_spells_unemployed_lag2 + q_woman + hgage + ed_degree + any_children + helth + hhstate + married + immigrant, data = ps_matches, model = "between")
summary(plm4.1ps_bF)

# Fixed.
plm4.1ps_fF <- plm(num_spells_unemployed ~ num_spells_unemployed_lag1 + num_spells_unemployed_lag2 + q_woman + hgage + ed_degree + any_children + helth + hhstate + married, data = ps_matches, model = "within", weights = lnwtrp)
summary(plm4.1ps_fF)

# Random.
plm4.1ps_rF <- plm(num_spells_unemployed ~ num_spells_unemployed_lag1 + num_spells_unemployed_lag2 + q_woman + hgage + ed_degree + any_children + helth + hhstate + married + immigrant, data = ps_matches, model = "random", weights = lnwtrp)
summary(plm4.1ps_rF)

# Hausman test.
hausman4.1_psF <- phtest(plm4.1ps_fF, plm4.1ps_rF)
hausman4.1_psF # Shouldn't use random.

# PS matched: pooled, between, fixed, and random effects.
stargazer(plm4.1ps_pF, plm4.1ps_bF, plm4.1ps_fF, plm4.1ps_rF,
          type = "html",
          out = "employment412F.html",
          title = "HILDA Employment: propensity score matched, Females",
          align = TRUE,
          keep.stat = c("n", "rsq", "adj.rsq"),
          no.space = TRUE)

```

#### 4.1.3: IPT weighted.

```{r}

# Pooling.
plm4.1ipt_p <- plm(num_spells_unemployed ~ num_spells_unemployed_lag1 + num_spells_unemployed_lag2 + sexor_binary_2 + hgage + female + ed_degree + any_children + helth + hhstate + married + immigrant, data = hilda_2, model = "pooling", weights = final_ipt_weights)
summary(plm4.1ipt_p)

# Between.
plm4.1ipt_b <- plm(num_spells_unemployed ~ num_spells_unemployed_lag1 + num_spells_unemployed_lag2 + sexor_binary_2 + hgage + female + ed_degree + any_children + helth + hhstate + married + immigrant, data = hilda_2, model = "between")
summary(plm4.1ipt_b)

# Fixed.
plm4.1ipt_f <- plm(num_spells_unemployed ~ num_spells_unemployed_lag1 + num_spells_unemployed_lag2 + sexor_binary_2 + hgage + ed_degree + any_children + helth + hhstate + married, data = hilda_2, model = "within", weights = final_ipt_weights)
summary(plm4.1ipt_f)

# Random.
plm4.1ipt_r <- plm(num_spells_unemployed ~ num_spells_unemployed_lag1 + num_spells_unemployed_lag2 + sexor_binary_2 + hgage + female + ed_degree + any_children + helth + hhstate + married + immigrant, data = hilda_2, model = "random", weights = final_ipt_weights)
summary(plm4.1ipt_r)

# Hausman test.
hausman4.1_ipt <- phtest(plm4.1ipt_f, plm4.1ipt_r)
hausman4.1_ipt # Shouldn't use random.

# IPT weighted: pooled, between, fixed, and random effects.
stargazer(plm4.1ipt_p, plm4.1ipt_b, plm4.1ipt_f, plm4.1ipt_r,
          type = "html",
          out = "employment413.html",
          title = "HILDA Employment: inversity probability of treatment weighted pooled, between, fixed, and random effects",
          align = TRUE,
          keep.stat = c("n", "rsq", "adj.rsq"),
          no.space = TRUE)

# Pooling.
plm4.1ipt_pM <- plm(num_spells_unemployed ~ num_spells_unemployed_lag1 + num_spells_unemployed_lag2 + q_man + hgage + ed_degree + any_children + helth + hhstate + married + immigrant, data = hilda_2, model = "pooling", weights = final_ipt_weights)
summary(plm4.1ipt_pM)

# Between.
plm4.1ipt_bM <- plm(num_spells_unemployed ~ num_spells_unemployed_lag1 + num_spells_unemployed_lag2 + q_man + hgage + ed_degree + any_children + helth + hhstate + married + immigrant, data = hilda_2, model = "between")
summary(plm4.1ipt_bM)

# Fixed.
plm4.1ipt_fM <- plm(num_spells_unemployed ~ num_spells_unemployed_lag1 + num_spells_unemployed_lag2 + q_man + hgage + ed_degree + any_children + helth + hhstate + married, data = hilda_2, model = "within", weights = final_ipt_weights)
summary(plm4.1ipt_fM)

# Random.
plm4.1ipt_rM <- plm(num_spells_unemployed ~ num_spells_unemployed_lag1 + num_spells_unemployed_lag2 + q_man + hgage + ed_degree + any_children + helth + hhstate + married + immigrant, data = hilda_2, model = "random", weights = final_ipt_weights)
summary(plm4.1ipt_rM)

# Hausman test.
hausman4.1_iptM <- phtest(plm4.1ipt_fM, plm4.1ipt_rM)
hausman4.1_iptM # Shouldn't use random.

# IPT weighted: pooled, between, fixed, and random effects.
stargazer(plm4.1ipt_pM, plm4.1ipt_bM, plm4.1ipt_fM, plm4.1ipt_rM,
          type = "html",
          out = "employment413M.html",
          title = "HILDA Employment: IPTW, Males",
          align = TRUE,
          keep.stat = c("n", "rsq", "adj.rsq"),
          no.space = TRUE)

# Pooling.
plm4.1ipt_pF <- plm(num_spells_unemployed ~ num_spells_unemployed_lag1 + num_spells_unemployed_lag2 + q_woman + hgage + ed_degree + any_children + helth + hhstate + married + immigrant, data = hilda_2, model = "pooling", weights = final_ipt_weights)
summary(plm4.1ipt_pF)

# Between.
plm4.1ipt_bF <- plm(num_spells_unemployed ~ num_spells_unemployed_lag1 + num_spells_unemployed_lag2 + q_woman + hgage + ed_degree + any_children + helth + hhstate + married + immigrant, data = hilda_2, model = "between")
summary(plm4.1ipt_bF)

# Fixed.
plm4.1ipt_fF <- plm(num_spells_unemployed ~ num_spells_unemployed_lag1 + num_spells_unemployed_lag2 + q_woman + hgage + ed_degree + any_children + helth + hhstate + married, data = hilda_2, model = "within", weights = final_ipt_weights)
summary(plm4.1ipt_fF)

# Random.
plm4.1ipt_rF <- plm(num_spells_unemployed ~ num_spells_unemployed_lag1 + num_spells_unemployed_lag2 + q_woman + hgage + ed_degree + any_children + helth + hhstate + married + immigrant, data = hilda_2, model = "random", weights = final_ipt_weights)
summary(plm4.1ipt_rF)

# Hausman test.
hausman4.1_iptF <- phtest(plm4.1ipt_fF, plm4.1ipt_rF)
hausman4.1_iptF # Shouldn't use random.

# IPT weighted: pooled, between, fixed, and random effects.
stargazer(plm4.1ipt_pF, plm4.1ipt_bF, plm4.1ipt_fF, plm4.1ipt_rF,
          type = "html",
          out = "employment413F.html",
          title = "HILDA Employment: IPTW, Females",
          align = TRUE,
          keep.stat = c("n", "rsq", "adj.rsq"),
          no.space = TRUE)


# Combine models for all sexes, male, and female
htmlreg(list(plm4.1ipt_p, plm4.1ipt_b, plm4.1ipt_f, plm4.1ipt_r,
             plm4.1ipt_pM, plm4.1ipt_bM, plm4.1ipt_fM, plm4.1ipt_rM,
             plm4.1ipt_pF, plm4.1ipt_bF, plm4.1ipt_fF, plm4.1ipt_rF),
        file = "employment_combined_ipt.html",
        title = "Table 4.2: HILDA Employment: Inverse Probability of Treatment Weighted Models",
        caption = "HILDA Employment: Inverse Probability of Treatment Weighted Models",
        caption.above = TRUE,
        label = "tab:employment_combined_ipt",
        custom.model.names = c("Pooled", "Between", "Fixed", "Random",
                               "Pooled (M)", "Between (M)", "Fixed (M)", "Random (M)",
                               "Pooled (F)", "Between (F)", "Fixed (F)", "Random (F)"),
        custom.coef.map = list("num_spells_unemployed_lag1" = "Unemployment Spells (Lag 1)",
                               "num_spells_unemployed_lag2" = "Unemployment Spells (Lag 2)",
                               "sexor_binary_2" = "Sexual Orientation (Binary)",
                               "hgage" = "Age",
                               "female" = "Female",
                               "ed_degree" = "Education Degree",
                               "any_children" = "Any Children",
                               "helth" = "Health",
                               "hhstate" = "Household State",
                               "married" = "Married",
                               "immigrant" = "Immigrant",
                               "q_man" = "Male",
                               "q_woman" = "Female"),
        include.rsquared = TRUE,
        include.adjrs = TRUE,
        include.nobs = TRUE,
        single.row = FALSE)

```

### 4.2: Random effects w/ varying slopes.

#### 4.2.1: Regular

```{r}

# Random.
plm4.2r <- lmer(num_spells_unemployed ~ num_spells_unemployed_lag1 + num_spells_unemployed_lag2 + sexor_binary_2 + hgage + female + ed_degree + any_children + helth + married + immigrant + (1 + sexor_binary_2 | xwaveid) + (1 | hhrhid), data = hilda_2, REML = TRUE, weights = lnwtrp)
summary(plm4.2r) # Model fit isn't great.

rsq_plm4.2r <- r.squaredGLMM(plm4.2r) # R-squared for the whole model is very high.

# Random.
plm4.2rM <- lmer(num_spells_unemployed ~ num_spells_unemployed_lag1 + num_spells_unemployed_lag2 + q_man + hgage + female + ed_degree + any_children + helth + married + immigrant + (1 + sexor_binary_2 | xwaveid) + (1 | hhrhid), data = hilda_2, REML = TRUE, weights = lnwtrp)
summary(plm4.2rM) # Model fit isn't great.

rsq_plm4.2rM <- r.squaredGLMM(plm4.2rM) # R-squared for the whole model is very high.

# Random.
plm4.2rF <- lmer(num_spells_unemployed ~ num_spells_unemployed_lag1 + num_spells_unemployed_lag2 + q_woman + hgage + female + ed_degree + any_children + helth + married + immigrant + (1 + sexor_binary_2 | xwaveid) + (1 | hhrhid), data = hilda_2, REML = TRUE, weights = lnwtrp)
summary(plm4.2rF) # Model fit isn't great.

rsq_plm4.2rF <- r.squaredGLMM(plm4.2rF) # R-squared for the whole model is very high.


```

#### 4.2.2: IPT weighted

```{r}

# Random.
plm4.2ipt_r <- lmer(num_spells_unemployed ~ num_spells_unemployed_lag1 + num_spells_unemployed_lag2 + sexor_binary_2 + hgage + female + ed_degree + any_children + helth + married + immigrant + (1 + sexor_binary_2 | xwaveid) + (1 | hhrhid), data = hilda_2, REML = TRUE, weights = final_ipt_weights)
summary(plm4.2ipt_r) # Model fit isn't great.

rsq_plm4.2ipt_r <- r.squaredGLMM(plm4.2ipt_r) # R-squared for the whole model is very high.
rsq_plm4.2ipt_r

# Random.
plm4.2ipt_rM <- lmer(num_spells_unemployed ~ num_spells_unemployed_lag1 + num_spells_unemployed_lag2 + q_man + hgage + female + ed_degree + any_children + helth + married + immigrant + (1 + sexor_binary_2 | xwaveid) + (1 | hhrhid), data = hilda_2, REML = TRUE, weights = final_ipt_weights)
summary(plm4.2ipt_rM) # Model fit isn't great.

rsq_plm4.2ipt_rM <- r.squaredGLMM(plm4.2ipt_rM) # R-squared for the whole model is very high.
rsq_plm4.2ipt_rM

# Random.
plm4.2ipt_rF <- lmer(num_spells_unemployed ~ num_spells_unemployed_lag1 + num_spells_unemployed_lag2 + q_woman + hgage + female + ed_degree + any_children + helth + married + immigrant + (1 + sexor_binary_2 | xwaveid) + (1 | hhrhid), data = hilda_2, REML = TRUE, weights = final_ipt_weights)
summary(plm4.2ipt_rF) # Model fit isn't great.

rsq_plm4.2ipt_rF <- r.squaredGLMM(plm4.2ipt_rF) # R-squared for the whole model is very high.
rsq_plm4.2ipt_rF

# Combine models for all sexes, male, and female
htmlreg(list(plm4.2r, plm4.2rM, plm4.2rF,
             plm4.2ipt_r, plm4.2ipt_rM, plm4.2ipt_rF),
        file = "employment_combined_plm42.html",
        title = "Table 4.3: HILDA Employment: Random Effects Models",
        caption = "HILDA Employment: Linear Mixed Effects Models",
        caption.above = TRUE,
        label = "tab:employment_combined_plm42",
        custom.model.names = c("Random", "Random (M)", "Random (F)",
                               "Random (IPT)", "Random (IPT, M)", "Random (IPT, F)"),
        custom.coef.map = list("num_spells_unemployed_lag1" = "Unemployment Spells (Lag 1)",
                               "num_spells_unemployed_lag2" = "Unemployment Spells (Lag 2)",
                               "sexor_binary_2" = "Sexual Orientation (Binary)",
                               "hgage" = "Age",
                               "female" = "Female",
                               "ed_degree" = "Education Degree",
                               "any_children" = "Any Children",
                               "helth" = "Disabled",
                               "married" = "Married",
                               "immigrant" = "Immigrant",
                               "q_man" = "Gay or bisexual man",
                               "q_woman" = "Lesbian or bisexual woman"),
        include.aic = TRUE,
        include.bic = TRUE,
        include.nobs = TRUE,
        include.rsquared = TRUE,
        include.adjrs = TRUE,
        single.row = TRUE,
        stars = c(0.01, 0.05, 0.1),
        omit.coef = c("(Intercept)", "Var: hhrhid", "Var: xwaveid", "Var: xwaveid sexor_binary_2", "Cov: xwaveid (Intercept) sexor_binary_2"))

```

### 4.3: MBAW MLE.

```{r}

# In Stata.

```

### 4.4: DML for CI.

```{r}

# Creating data table.
hilda_DMLe <- hilda_2 %>%
  select(num_spells_unemployed, sexor_binary_2, hgage, female, ed_degree, any_children, helth, hhsos, hhstate, married, immigrant, hhrhid, hhiu, wave, xwaveid, num_spells_unemployed_lag1, num_spells_unemployed_lag2) %>%
  tidyr::drop_na()

hilda_DMLe <- as.data.table(hilda_DMLe)

# Making hhiu a factor.
hilda_DMLe$hhiu <- as_factor(hilda_DMLe$hhiu)
str(hilda_DMLe$hhiu)

# Identifying outcome variable, treatment variable, and other covariates.
outcome1e <- "num_spells_unemployed"
treatment1e <- "sexor_binary_2"
covars1e <- setdiff(names(hilda_DMLe), c("xwaveid", "wave", outcome1e, treatment1e))

# Creating DoubleMLData object.
hilda_DMLobj_e <- DoubleMLData$new(hilda_DMLe, y_col = outcome1e, d_cols = treatment1e, x_cols = covars1e)

# Fitting the DML model.
learner1e = lrn("regr.ranger", num.trees = 500)

# Creating DoubleMLPLR object
dml_plr1e = DoubleMLPLR$new(hilda_DMLobj_e, ml_l = learner1e, ml_m = learner1e)

dml_plr1e$fit()

# Interpretation:
# Get the estimated treatment effect
theta_hat1e = dml_plr1e$coef
theta_hat1e

# Get the standard error and confidence intervals
se_hat1e = dml_plr1e$se
se_hat1e 

# Creating data table.
hilda_DMLeM <- hilda_2 %>%
  select(num_spells_unemployed, q_man, hgage, female, ed_degree, any_children, helth, hhsos, hhstate, married, immigrant, hhrhid, hhiu, wave, xwaveid, num_spells_unemployed_lag1, num_spells_unemployed_lag2) %>%
  tidyr::drop_na()

hilda_DMLeM <- as.data.table(hilda_DMLeM)

# Making hhiu a factor.
hilda_DMLeM$hhiu <- as_factor(hilda_DMLeM$hhiu)
str(hilda_DMLeM$hhiu)

# Identifying outcome variable, treatment variable, and other covariates.
outcome1eM <- "num_spells_unemployed"
treatment1eM <- "q_man"
covars1eM <- setdiff(names(hilda_DMLeM), c("xwaveid", "wave", outcome1eM, treatment1eM))

# Creating DoubleMLData object.
hilda_DMLobj_eM <- DoubleMLData$new(hilda_DMLeM, y_col = outcome1eM, d_cols = treatment1eM, x_cols = covars1eM)

# Fitting the DML model.
learner1eM = lrn("regr.ranger", num.trees = 500)

# Creating DoubleMLPLR object
dml_plr1eM = DoubleMLPLR$new(hilda_DMLobj_eM, ml_l = learner1eM, ml_m = learner1eM)

dml_plr1eM$fit()

# Interpretation:
# Get the estimated treatment effect
theta_hat1eM = dml_plr1eM$coef
theta_hat1eM

# Get the standard error and confidence intervals
se_hat1eM = dml_plr1eM$se
se_hat1eM 

# Creating data table.
hilda_DMLeF <- hilda_2 %>%
  select(num_spells_unemployed, q_woman, hgage, female, ed_degree, any_children, helth, hhsos, hhstate, married, immigrant, hhrhid, hhiu, wave, xwaveid, num_spells_unemployed_lag1, num_spells_unemployed_lag2) %>%
  tidyr::drop_na()

hilda_DMLeF<- as.data.table(hilda_DMLeF)

# Making hhiu a factor.
hilda_DMLeF$hhiu <- as_factor(hilda_DMLeF$hhiu)
str(hilda_DMLeF$hhiu)

# Identifying outcome variable, treatment variable, and other covariates.
outcome1eF<- "num_spells_unemployed"
treatment1eF<- "q_woman"
covars1eF <- setdiff(names(hilda_DMLeF), c("xwaveid", "wave", outcome1eF, treatment1eF))

# Creating DoubleMLData object.
hilda_DMLobj_eF<- DoubleMLData$new(hilda_DMLeF, y_col = outcome1eF, d_cols = treatment1eF, x_cols = covars1eF)

# Fitting the DML model.
learner1eF= lrn("regr.ranger", num.trees = 500)

# Creating DoubleMLPLR object
dml_plr1eF= DoubleMLPLR$new(hilda_DMLobj_eF, ml_l = learner1eF, ml_m = learner1eF)

dml_plr1eF$fit()

# Interpretation:
# Get the estimated treatment effect
theta_hat1eF= dml_plr1eF$coef
theta_hat1eF

# Get the standard error and confidence intervals
se_hat1eF= dml_plr1eF$se
se_hat1eF

```

### 4.5 Matched, pooled DiDs.

```{r}

# Propensity scores. Fixed effects models.

# Covid-19.
DiD4.5_PC <- plm(num_spells_unemployed ~ post_covid + sexor_binary_2 + post_covid*sexor_binary_2 + hgage + ed_degree + any_children + helth + married, data = ps_matches, model = "within")
summary(DiD4.5_PC) # Model fit not good.

# Bootstrapped standard errors for the Covid-19 model
boot_PC <- boottest(DiD4.5_PC, B = 1000)
summary(boot_PC)

# Marriage equality.
DiD4.5_PM <- plm(num_spells_unemployed ~ post_mar + sexor_binary_2 + post_covid*sexor_binary_2 + hgage + ed_degree + any_children + helth + married, data = ps_matches, model = "within")
summary(DiD4.5_PM) # Model fit not good.

```

## 5: Income.

### 5.1: Pooled, between, fixed, and random effects.

#### 5.1.1: Regular.

```{r}

# Pooling.
plm5.1p <- plm(disp_inc ~ disp_inc_lag1 + disp_inc_lag2 + sexor_binary_2 + hgage + female + ed_degree + any_children + helth + hhstate + married + immigrant, data = hilda_2, model = "pooling")
summary(plm5.1p)

# Between.
plm5.1b <- plm(disp_inc ~ disp_inc_lag1 + disp_inc_lag2 + sexor_binary_2 + hgage + female + ed_degree + any_children + helth + hhstate + married + immigrant, data = hilda_2, model = "between")
summary(plm5.1b)

# Fixed.
plm5.1f <- plm(disp_inc ~ disp_inc_lag1 + disp_inc_lag2 + sexor_binary_2 + hgage + ed_degree + any_children + helth + hhstate + married, data = hilda_2, model = "within", weights = lnwtrp)
summary(plm5.1f)

# Random.
plm5.1r <- plm(disp_inc ~ disp_inc_lag1 + disp_inc_lag2 + sexor_binary_2 + hgage + female + ed_degree + any_children + helth + hhstate + married + immigrant, data = hilda_2, model = "random", weights = lnwtrp)
summary(plm5.1r)

# Hausman test.
hausman5.1 <- phtest(plm5.1f, plm5.1r)
hausman5.1 # Shouldn't use random.

# income: pooled, between, fixed, and random effects.
stargazer(plm5.1p, plm5.1b, plm5.1f, plm5.1r,
          type = "html",
          out = "income511.html",
          title = "HILDA income, All Sexes",
          align = TRUE,
          keep.stat = c("n", "rsq", "adj.rsq"),
          no.space = TRUE)

# Pooling.
plm5.1pM <- plm(disp_inc ~ disp_inc_lag1 + disp_inc_lag2 + q_man + hgage + ed_degree + any_children + helth + hhstate + married + immigrant, data = hilda_2, model = "pooling")
summary(plm5.1pM)

# Between.
plm5.1bM <- plm(disp_inc ~ disp_inc_lag1 + disp_inc_lag2 + q_man + hgage + ed_degree + any_children + helth + hhstate + married + immigrant, data = hilda_2, model = "between")
summary(plm5.1bM)

# Fixed.
plm5.1fM <- plm(disp_inc ~ disp_inc_lag1 + disp_inc_lag2 + q_man + hgage + ed_degree + any_children + helth + hhstate + married, data = hilda_2, model = "within", weights = lnwtrp)
summary(plm5.1fM)

# Random.
plm5.1rM <- plm(disp_inc ~ disp_inc_lag1 + disp_inc_lag2 + q_man + hgage + ed_degree + any_children + helth + hhstate + married + immigrant, data = hilda_2, model = "random", weights = lnwtrp)
summary(plm5.1rM)

# Hausman test.
hausman5.1M <- phtest(plm5.1fM, plm5.1rM)
hausman5.1M # Shouldn't use random.

# income: pooled, between, fixed, and random effects.
stargazer(plm5.1pM, plm5.1bM, plm5.1fM, plm5.1rM,
          type = "html",
          out = "income511M.html",
          title = "HILDA income, Male",
          align = TRUE,
          keep.stat = c("n", "rsq", "adj.rsq"),
          no.space = TRUE)

# Pooling.
plm5.1pF <- plm(disp_inc ~ disp_inc_lag1 + disp_inc_lag2 + q_woman + hgage + ed_degree + any_children + helth + hhstate + married + immigrant, data = hilda_2, model = "pooling")
summary(plm5.1pF)

# Between.
plm5.1bF <- plm(disp_inc ~ disp_inc_lag1 + disp_inc_lag2 + q_woman + hgage + ed_degree + any_children + helth + hhstate + married + immigrant, data = hilda_2, model = "between")
summary(plm5.1bF)

# Fixed.
plm5.1fF <- plm(disp_inc ~ disp_inc_lag1 + disp_inc_lag2 + q_woman + hgage + ed_degree + any_children + helth + hhstate + married, data = hilda_2, model = "within", weights = lnwtrp)
summary(plm5.1fF)

# Random.
plm5.1rF <- plm(disp_inc ~ disp_inc_lag1 + disp_inc_lag2 + q_woman + hgage + ed_degree + any_children + helth + hhstate + married + immigrant, data = hilda_2, model = "random", weights = lnwtrp)
summary(plm5.1rF)

# Hausman test.
hausman5.1F <- phtest(plm5.1fF, plm5.1rF)
hausman5.1F # Shouldn't use random.

# income: pooled, between, fixed, and random effects.
stargazer(plm5.1pF, plm5.1bF, plm5.1fF, plm5.1rF,
          type = "html",
          out = "income511F.html",
          title = "HILDA income, Female",
          align = TRUE,
          keep.stat = c("n", "rsq", "adj.rsq"),
          no.space = TRUE)

# Combine models for all sexes, male, and female
htmlreg(list(plm5.1p, plm5.1b, plm5.1f, plm5.1r,
             plm5.1pM, plm5.1bM, plm5.1fM, plm5.1rM,
             plm5.1pF, plm5.1bF, plm5.1fF, plm5.1rF),
        file = "income_combined_plm51.html",
        title = "Figure 4.4: HILDA Income: Pooled, Between, Fixed, and Random Effects Models",
        caption = "HILDA Income: Pooled, Between, Fixed, and Random Effects Models",
        caption.above = TRUE,
        label = "tab:income_combined_plm51",
        custom.model.names = c("Pooled", "Between", "Fixed", "Random",
                               "Pooled (M)", "Between (M)", "Fixed (M)", "Random (M)",
                               "Pooled (F)", "Between (F)", "Fixed (F)", "Random (F)"),
        custom.coef.map = list("disp_inc_lag1" = "Disposable Income (Lag 1)",
                               "disp_inc_lag2" = "Disposable Income (Lag 2)",
                               "sexor_binary_2" = "Sexual Orientation (Binary)",
                               "hgage" = "Age",
                               "female" = "Female",
                               "ed_degree" = "Education Degree",
                               "any_children" = "Any Children",
                               "helth" = "Disabled",
                               "hhstate" = "Household State",
                               "married" = "Married",
                               "immigrant" = "Immigrant",
                               "q_man" = "Gay or bisexual man",
                               "q_woman" = "Lesbian or bisexual woman"),
        include.rsquared = TRUE,
        include.adjrs = TRUE,
        include.nobs = TRUE,
        single.row = FALSE,
        stars = c(0.01, 0.05, 0.1))

```

#### 5.1.2: PS matched.

```{r}

# Pooling.
plm5.1ps_p <- plm(disp_inc ~ disp_inc_lag1 + disp_inc_lag2 + sexor_binary_2 + hgage + female + ed_degree + any_children + helth + hhstate + married + immigrant, data = ps_matches, model = "pooling")
summary(plm5.1ps_p)

# Between.
plm5.1ps_b <- plm(disp_inc ~ disp_inc_lag1 + disp_inc_lag2 + sexor_binary_2 + hgage + female + ed_degree + any_children + helth + hhstate + married + immigrant, data = ps_matches, model = "between")
summary(plm5.1ps_b)

# Fixed.
plm5.1ps_f <- plm(disp_inc ~ disp_inc_lag1 + disp_inc_lag2 + sexor_binary_2 + hgage + ed_degree + any_children + helth + hhstate + married, data = ps_matches, model = "within", weights = lnwtrp)
summary(plm5.1ps_f)

# Random.
plm5.1ps_r <- plm(disp_inc ~ disp_inc_lag1 + disp_inc_lag2 + sexor_binary_2 + hgage + female + ed_degree + any_children + helth + hhstate + married + immigrant, data = ps_matches, model = "random", weights = lnwtrp)
summary(plm5.1ps_r)

# Hausman test.
hausman5.1_ps <- phtest(plm5.1ps_f, plm5.1ps_r)
hausman5.1_ps # Shouldn't use random.

# PS matched: pooled, between, fixed, and random effects.
stargazer(plm5.1ps_p, plm5.1ps_b, plm5.1ps_f, plm5.1ps_r,
          type = "html",
          out = "income512.html",
          title = "HILDA income: propensity score matched pooled, between, fixed, and random effects",
          align = TRUE,
          keep.stat = c("n", "rsq", "adj.rsq"),
          no.space = TRUE)

# Pooling.
plm5.1ps_pM <- plm(disp_inc ~ disp_inc_lag1 + disp_inc_lag2 + q_man + hgage + ed_degree + any_children + helth + hhstate + married + immigrant, data = ps_matches, model = "pooling")
summary(plm5.1ps_pM)

# Between.
plm5.1ps_bM <- plm(disp_inc ~ disp_inc_lag1 + disp_inc_lag2 + q_man + hgage + ed_degree + any_children + helth + hhstate + married + immigrant, data = ps_matches, model = "between")
summary(plm5.1ps_bM)

# Fixed.
plm5.1ps_fM <- plm(disp_inc ~ disp_inc_lag1 + disp_inc_lag2 + q_man + hgage + ed_degree + any_children + helth + hhstate + married, data = ps_matches, model = "within", weights = lnwtrp)
summary(plm5.1ps_fM)

# Random.
plm5.1ps_rM <- plm(disp_inc ~ disp_inc_lag1 + disp_inc_lag2 + q_man + hgage + ed_degree + any_children + helth + hhstate + married + immigrant, data = ps_matches, model = "random", weights = lnwtrp)
summary(plm5.1ps_rM)

# Hausman test.
hausman5.1_psM <- phtest(plm5.1ps_fM, plm5.1ps_rM)
hausman5.1_psM # Shouldn't use random.

# PS matched: pooled, between, fixed, and random effects.
stargazer(plm5.1ps_pM, plm5.1ps_bM, plm5.1ps_fM, plm5.1ps_rM,
          type = "html",
          out = "income512M.html",
          title = "HILDA income: propensity score matched, Males",
          align = TRUE,
          keep.stat = c("n", "rsq", "adj.rsq"),
          no.space = TRUE)

# Pooling.
plm5.1ps_pF <- plm(disp_inc ~ disp_inc_lag1 + disp_inc_lag2 + q_woman + hgage + ed_degree + any_children + helth + hhstate + married + immigrant, data = ps_matches, model = "pooling")
summary(plm5.1ps_pF)

# Between.
plm5.1ps_bF <- plm(disp_inc ~ disp_inc_lag1 + disp_inc_lag2 + q_woman + hgage + ed_degree + any_children + helth + hhstate + married + immigrant, data = ps_matches, model = "between")
summary(plm5.1ps_bF)

# Fixed.
plm5.1ps_fF <- plm(disp_inc ~ disp_inc_lag1 + disp_inc_lag2 + q_woman + hgage + ed_degree + any_children + helth + hhstate + married, data = ps_matches, model = "within", weights = lnwtrp)
summary(plm5.1ps_fF)

# Random.
plm5.1ps_rF <- plm(disp_inc ~ disp_inc_lag1 + disp_inc_lag2 + q_woman + hgage + ed_degree + any_children + helth + hhstate + married + immigrant, data = ps_matches, model = "random", weights = lnwtrp)
summary(plm5.1ps_rF)

# Hausman test.
hausman5.1_psF <- phtest(plm5.1ps_fF, plm5.1ps_rF)
hausman5.1_psF # Shouldn't use random.

# PS matched: pooled, between, fixed, and random effects.
stargazer(plm5.1ps_pF, plm5.1ps_bF, plm5.1ps_fF, plm5.1ps_rF,
          type = "html",
          out = "income512F.html",
          title = "HILDA income: propensity score matched, Females",
          align = TRUE,
          keep.stat = c("n", "rsq", "adj.rsq"),
          no.space = TRUE)

# Combine models for all sexes, male, and female
htmlreg(list(plm5.1ps_p, plm5.1ps_b, plm5.1ps_f, plm5.1ps_r,
             plm5.1ps_pM, plm5.1ps_bM, plm5.1ps_fM, plm5.1ps_rM,
             plm5.1ps_pF, plm5.1ps_bF, plm5.1ps_fF, plm5.1ps_rF),
        file = "ps_score_income.html",
        title = "Table 4.5: HILDA Income: Inverse Probability of Treatment Weighted Models",
        caption = "HILDA Income: Propensity Score Matched Models",
        caption.above = TRUE,
        label = "tab:ps_score_income",
        custom.model.names = c("Pooled", "Between", "Fixed", "Random",
                               "Pooled (M)", "Between (M)", "Fixed (M)", "Random (M)",
                               "Pooled (F)", "Between (F)", "Fixed (F)", "Random (F)"),
        custom.coef.map = list("disp_inc_lag1" = "Disposable Income (Lag 1)",
                               "disp_inc_lag2" = "Disposable Income (Lag 2)",
                               "sexor_binary_2" = "Sexual Orientation (Binary)",
                               "hgage" = "Age",
                               "female" = "Female",
                               "ed_degree" = "Education Degree",
                               "any_children" = "Any Children",
                               "helth" = "Disabled",
                               "hhstate" = "Household State",
                               "married" = "Married",
                               "immigrant" = "Immigrant",
                               "q_man" = "Gay or bisexual man",
                               "q_woman" = "Lesbian or bisexual woman"),
        include.rsquared = TRUE,
        include.adjrs = TRUE,
        include.nobs = TRUE,
        single.row = TRUE,
        stars = c(0.01, 0.05, 0.1))

```

#### 5.1.3: IPT weighted.

```{r}

# Pooling.
plm5.1ipt_p <- plm(disp_inc ~ disp_inc_lag1 + disp_inc_lag2 + sexor_binary_2 + hgage + female + ed_degree + any_children + helth + hhstate + married + immigrant, data = hilda_2, model = "pooling", weights = final_ipt_weights)
summary(plm5.1ipt_p)

# Between.
plm5.1ipt_b <- plm(disp_inc ~ disp_inc_lag1 + disp_inc_lag2 + sexor_binary_2 + hgage + female + ed_degree + any_children + helth + hhstate + married + immigrant, data = hilda_2, model = "between")
summary(plm5.1ipt_b)

# Fixed.
plm5.1ipt_f <- plm(disp_inc ~ disp_inc_lag1 + disp_inc_lag2 + sexor_binary_2 + hgage + ed_degree + any_children + helth + hhstate + married, data = hilda_2, model = "within", weights = final_ipt_weights)
summary(plm5.1ipt_f)

# Random.
plm5.1ipt_r <- plm(disp_inc ~ disp_inc_lag1 + disp_inc_lag2 + sexor_binary_2 + hgage + female + ed_degree + any_children + helth + hhstate + married + immigrant, data = hilda_2, model = "random", weights = final_ipt_weights)
summary(plm5.1ipt_r)

# Hausman test.
hausman5.1_ipt <- phtest(plm5.1ipt_f, plm5.1ipt_r)
hausman5.1_ipt # Shouldn't use random.

# IPT weighted: pooled, between, fixed, and random effects.
stargazer(plm5.1ipt_p, plm5.1ipt_b, plm5.1ipt_f, plm5.1ipt_r,
          type = "html",
          out = "income513.html",
          title = "HILDA income: inversity probability of treatment weighted pooled, between, fixed, and random effects",
          align = TRUE,
          keep.stat = c("n", "rsq", "adj.rsq"),
          no.space = TRUE)

# Pooling.
plm5.1ipt_pM <- plm(disp_inc ~ disp_inc_lag1 + disp_inc_lag2 + q_man + hgage + ed_degree + any_children + helth + hhstate + married + immigrant, data = hilda_2, model = "pooling", weights = final_ipt_weights)
summary(plm5.1ipt_pM)

# Between.
plm5.1ipt_bM <- plm(disp_inc ~ disp_inc_lag1 + disp_inc_lag2 + q_man + hgage + ed_degree + any_children + helth + hhstate + married + immigrant, data = hilda_2, model = "between")
summary(plm5.1ipt_bM)

# Fixed.
plm5.1ipt_fM <- plm(disp_inc ~ disp_inc_lag1 + disp_inc_lag2 + q_man + hgage + ed_degree + any_children + helth + hhstate + married, data = hilda_2, model = "within", weights = final_ipt_weights)
summary(plm5.1ipt_fM)

# Random.
plm5.1ipt_rM <- plm(disp_inc ~ disp_inc_lag1 + disp_inc_lag2 + q_man + hgage + ed_degree + any_children + helth + hhstate + married + immigrant, data = hilda_2, model = "random", weights = final_ipt_weights)
summary(plm5.1ipt_rM)

# Hausman test.
hausman5.1_iptM <- phtest(plm5.1ipt_fM, plm5.1ipt_rM)
hausman5.1_iptM # Shouldn't use random.

# IPT weighted: pooled, between, fixed, and random effects.
stargazer(plm5.1ipt_pM, plm5.1ipt_bM, plm5.1ipt_fM, plm5.1ipt_rM,
          type = "html",
          out = "income513M.html",
          title = "HILDA income: IPTW, Males",
          align = TRUE,
          keep.stat = c("n", "rsq", "adj.rsq"),
          no.space = TRUE)

# Pooling.
plm5.1ipt_pF <- plm(disp_inc ~ disp_inc_lag1 + disp_inc_lag2 + q_woman + hgage + ed_degree + any_children + helth + hhstate + married + immigrant, data = hilda_2, model = "pooling", weights = final_ipt_weights)
summary(plm5.1ipt_pF)

# Between.
plm5.1ipt_bF <- plm(disp_inc ~ disp_inc_lag1 + disp_inc_lag2 + q_woman + hgage + ed_degree + any_children + helth + hhstate + married + immigrant, data = hilda_2, model = "between")
summary(plm5.1ipt_bF)

# Fixed.
plm5.1ipt_fF <- plm(disp_inc ~ disp_inc_lag1 + disp_inc_lag2 + q_woman + hgage + ed_degree + any_children + helth + hhstate + married, data = hilda_2, model = "within", weights = final_ipt_weights)
summary(plm5.1ipt_fF)

# Random.
plm5.1ipt_rF <- plm(disp_inc ~ disp_inc_lag1 + disp_inc_lag2 + q_woman + hgage + ed_degree + any_children + helth + hhstate + married + immigrant, data = hilda_2, model = "random", weights = final_ipt_weights)
summary(plm5.1ipt_rF)

# Hausman test.
hausman5.1_iptF <- phtest(plm5.1ipt_fF, plm5.1ipt_rF)
hausman5.1_iptF # Shouldn't use random.

# IPT weighted: pooled, between, fixed, and random effects.
stargazer(plm5.1ipt_pF, plm5.1ipt_bF, plm5.1ipt_fF, plm5.1ipt_rF,
          type = "html",
          out = "income513F.html",
          title = "HILDA income: IPTW, Females",
          align = TRUE,
          keep.stat = c("n", "rsq", "adj.rsq"),
          no.space = TRUE)


# Combine models for all sexes, male, and female
htmlreg(list(plm5.1ipt_p, plm5.1ipt_b, plm5.1ipt_f, plm5.1ipt_r,
             plm5.1ipt_pM, plm5.1ipt_bM, plm5.1ipt_fM, plm5.1ipt_rM,
             plm5.1ipt_pF, plm5.1ipt_bF, plm5.1ipt_fF, plm5.1ipt_rF),
        file = "income_combined_plm51_ipt.html",
        title = "Table 4.5: HILDA Income: Inverse Probability of Treatment Weighted Models",
        caption = "HILDA Income: Inverse Probability of Treatment Weighted Models",
        caption.above = TRUE,
        label = "tab:income_combined_plm51_ipt",
        custom.model.names = c("Pooled", "Between", "Fixed", "Random",
                               "Pooled (M)", "Between (M)", "Fixed (M)", "Random (M)",
                               "Pooled (F)", "Between (F)", "Fixed (F)", "Random (F)"),
        custom.coef.map = list("disp_inc_lag1" = "Disposable Income (Lag 1)",
                               "disp_inc_lag2" = "Disposable Income (Lag 2)",
                               "sexor_binary_2" = "Sexual Orientation (Binary)",
                               "hgage" = "Age",
                               "female" = "Female",
                               "ed_degree" = "Education Degree",
                               "any_children" = "Any Children",
                               "helth" = "Disabled",
                               "hhstate" = "Household State",
                               "married" = "Married",
                               "immigrant" = "Immigrant",
                               "q_man" = "Gay or bisexual man",
                               "q_woman" = "Lesbian or bisexual woman"),
        include.rsquared = TRUE,
        include.adjrs = TRUE,
        include.nobs = TRUE,
        single.row = FALSE,
        stars = c(0.01, 0.05, 0.1))

```

### 5.2: Random effects w/ varying slopes.

#### 5.2.1: Regular

```{r}

# Random.
plm5.2r <- lmer(disp_inc ~ disp_inc_lag1 + disp_inc_lag2 + sexor_binary_2 + hgage + female + ed_degree + any_children + helth + married + immigrant + (1 + sexor_binary_2 | xwaveid) + (1 | hhrhid), data = hilda_2, REML = TRUE, weights = lnwtrp)
summary(plm5.2r) # Model fit isn't great.

rsq_plm5.2r <- r.squaredGLMM(plm5.2r) # R-squared for the whole model is very high.

# Random.
plm5.2rM <- lmer(disp_inc ~ disp_inc_lag1 + disp_inc_lag2 + q_man + hgage + female + ed_degree + any_children + helth + married + immigrant + (1 + sexor_binary_2 | xwaveid) + (1 | hhrhid), data = hilda_2, REML = TRUE, weights = lnwtrp)
summary(plm5.2rM) # Model fit isn't great.

rsq_plm5.2rM <- r.squaredGLMM(plm5.2rM) # R-squared for the whole model is very high.

# Random.
plm5.2rF <- lmer(disp_inc ~ disp_inc_lag1 + disp_inc_lag2 + q_woman + hgage + female + ed_degree + any_children + helth + married + immigrant + (1 + sexor_binary_2 | xwaveid) + (1 | hhrhid), data = hilda_2, REML = TRUE, weights = lnwtrp)
summary(plm5.2rF) # Model fit isn't great.

rsq_plm5.2rF <- r.squaredGLMM(plm5.2rF) # R-squared for the whole model is very high.


```

#### 5.2.2: IPT weighted

```{r}

# Random.
plm5.2ipt_r <- lmer(disp_inc ~ disp_inc_lag1 + disp_inc_lag2 + sexor_binary_2 + hgage + female + ed_degree + any_children + helth + married + immigrant + (1 + sexor_binary_2 | xwaveid) + (1 | hhrhid), data = hilda_2, REML = TRUE, weights = final_ipt_weights)
summary(plm5.2ipt_r) # Model fit isn't great.

rsq_plm5.2ipt_r <- r.squaredGLMM(plm5.2ipt_r) # R-squared for the whole model is very high.
rsq_plm5.2ipt_r

# Random.
plm5.2ipt_rM <- lmer(disp_inc ~ disp_inc_lag1 + disp_inc_lag2 + q_man + hgage + female + ed_degree + any_children + helth + married + immigrant + (1 + sexor_binary_2 | xwaveid) + (1 | hhrhid), data = hilda_2, REML = TRUE, weights = final_ipt_weights)
summary(plm5.2ipt_rM) # Model fit isn't great.

rsq_plm5.2ipt_rM <- r.squaredGLMM(plm5.2ipt_rM) # R-squared for the whole model is very high.
rsq_plm5.2ipt_rM

# Random.
plm5.2ipt_rF <- lmer(disp_inc ~ disp_inc_lag1 + disp_inc_lag2 + q_woman + hgage + female + ed_degree + any_children + helth + married + immigrant + (1 + sexor_binary_2 | xwaveid) + (1 | hhrhid), data = hilda_2, REML = TRUE, weights = final_ipt_weights)
summary(plm5.2ipt_rF) # Model fit isn't great.

rsq_plm5.2ipt_rF <- r.squaredGLMM(plm5.2ipt_rF) # R-squared for the whole model is very high.
rsq_plm5.2ipt_rF

# Combine models for all sexes, male, and female
htmlreg(list(plm5.2r, plm5.2rM, plm5.2rF,
             plm5.2ipt_r, plm5.2ipt_rM, plm5.2ipt_rF),
        file = "income_combined_plm52.html",
        title = "Table 4.6: HILDA Income: Random Effects Models",
        caption = "HILDA Income: Linear Mixed Effects Models",
        caption.above = TRUE,
        label = "tab:income_combined_plm52",
        custom.model.names = c("Random", "Random (M)", "Random (F)",
                               "Random (IPT)", "Random (IPT, M)", "Random (IPT, F)"),
        custom.coef.map = list("disp_inc_lag1" = "Disposable Income (Lag 1)",
                               "disp_inc_lag2" = "Disposable Income (Lag 2)",
                               "sexor_binary_2" = "Sexual Orientation (Binary)",
                               "hgage" = "Age",
                               "female" = "Female",
                               "ed_degree" = "Education Degree",
                               "any_children" = "Any Children",
                               "helth" = "Disabled",
                               "married" = "Married",
                               "immigrant" = "Immigrant",
                               "q_man" = "Gay or bisexual man",
                               "q_woman" = "Lesbian or bisexual woman"),
        include.aic = TRUE,
        include.bic = TRUE,
        include.nobs = TRUE,
        include.rsquared = TRUE,
        include.adjrs = TRUE,
        single.row = TRUE,
        stars = c(0.01, 0.05, 0.1),
        omit.coef = c("(Intercept)", "Var: hhrhid", "Var: xwaveid", "Var: xwaveid sexor_binary_2", "Cov: xwaveid (Intercept) sexor_binary_2"))


```

### 5.3: MBAW MLE.

```{r}

# In Stata.

```

### 5.4: DML for CI.

```{r}

# Creating data table.
hilda_DMLi <- hilda_2 %>%
  select(disp_inc, sexor_binary_2, hgage, female, ed_degree, any_children, helth, hhsos, hhstate, married, immigrant, hhrhid, hhiu, wave, xwaveid, disp_inc_lag1, disp_inc_lag2) %>%
  tidyr::drop_na()

hilda_DMLi <- as.data.table(hilda_DMLi)

# Making hhiu a factor.
hilda_DMLi$hhiu <- as_factor(hilda_DMLi$hhiu)
str(hilda_DMLi$hhiu)

# Identifying outcome variable, treatment variable, and other covariates.
outcome1i <- "disp_inc"
treatment1i <- "sexor_binary_2"
covars1i <- setdiff(names(hilda_DMLi), c("xwaveid", "wave", outcome1i, treatment1i))

# Creating DoubleMLData object.
hilda_DMLobj_i <- DoubleMLData$new(hilda_DMLi, y_col = outcome1i, d_cols = treatment1i, x_cols = covars1i)

# Fitting the DML model.
learner1i = lrn("regr.ranger", num.trees = 500)

# Creating DoubleMLPLR object
dml_plr1i = DoubleMLPLR$new(hilda_DMLobj_i, ml_l = learner1i, ml_m = learner1i)

dml_plr1i$fit()

# Interpretation:
# Get the estimated treatment effect
theta_hat1i = dml_plr1i$coef
theta_hat1i

# Get the standard error and confidence intervals
se_hat1i = dml_plr1i$se
se_hat1i 

# Creating data table.
hilda_DMLiM <- hilda_2 %>%
  select(disp_inc, q_man, hgage, female, ed_degree, any_children, helth, hhsos, hhstate, married, immigrant, hhrhid, hhiu, wave, xwaveid, disp_inc_lag1, disp_inc_lag2) %>%
  tidyr::drop_na()

hilda_DMLiM <- as.data.table(hilda_DMLiM)

# Making hhiu a factor.
hilda_DMLiM$hhiu <- as_factor(hilda_DMLiM$hhiu)
str(hilda_DMLiM$hhiu)

# Identifying outcome variable, treatment variable, and other covariates.
outcome1iM <- "disp_inc"
treatment1iM <- "q_man"
covars1iM <- setdiff(names(hilda_DMLiM), c("xwaveid", "wave", outcome1iM, treatment1iM))

# Creating DoubleMLData object.
hilda_DMLobj_iM <- DoubleMLData$new(hilda_DMLiM, y_col = outcome1iM, d_cols = treatment1iM, x_cols = covars1iM)

# Fitting the DML model.
learner1iM = lrn("regr.ranger", num.trees = 500)

# Creating DoubleMLPLR object
dml_plr1iM = DoubleMLPLR$new(hilda_DMLobj_iM, ml_l = learner1iM, ml_m = learner1iM)

dml_plr1iM$fit()

# Interpretation:
# Get the estimated treatment effect
theta_hat1iM = dml_plr1iM$coef
theta_hat1iM

# Get the standard error and confidence intervals
se_hat1iM = dml_plr1iM$se
se_hat1iM 

# Creating data table.
hilda_DMLiF <- hilda_2 %>%
  select(disp_inc, q_woman, hgage, female, ed_degree, any_children, helth, hhsos, hhstate, married, immigrant, hhrhid, hhiu, wave, xwaveid, disp_inc_lag1, disp_inc_lag2) %>%
  tidyr::drop_na()

hilda_DMLiF<- as.data.table(hilda_DMLiF)

# Making hhiu a factor.
hilda_DMLiF$hhiu <- as_factor(hilda_DMLiF$hhiu)
str(hilda_DMLiF$hhiu)

# Identifying outcome variable, treatment variable, and other covariates.
outcome1iF<- "disp_inc"
treatment1iF<- "q_woman"
covars1iF <- setdiff(names(hilda_DMLiF), c("xwaveid", "wave", outcome1iF, treatment1iF))

# Creating DoubleMLData object.
hilda_DMLobj_iF<- DoubleMLData$new(hilda_DMLiF, y_col = outcome1iF, d_cols = treatment1iF, x_cols = covars1iF)

# Fitting the DML model.
learner1iF= lrn("regr.ranger", num.trees = 500)

# Creating DoubleMLPLR object
dml_plr1iF= DoubleMLPLR$new(hilda_DMLobj_iF, ml_l = learner1iF, ml_m = learner1iF)

dml_plr1iF$fit()

# Interpretation:
# Get the estimated treatment effect
theta_hat1iF= dml_plr1iF$coef
theta_hat1iF

# Get the standard error and confidence intervals
se_hat1iF= dml_plr1iF$se
se_hat1iF

```

### 5.5 Matched, pooled DiDs.

```{r}

# Propensity scores. Fixed effects models.

# Covid-19.
DiD5.5_PC <- plm(disp_inc ~ disp_inc_lag1 + disp_inc_lag2 + post_covid + sexor_binary_2 + post_covid*sexor_binary_2 + hgage + ed_degree + any_children + helth + married, data = ps_matches, model = "within")
summary(DiD5.5_PC) # Model fit not good.

# Marriage equality.
DiD5.5_PM <- plm(disp_inc ~ disp_inc_lag1 + disp_inc_lag2 + post_mar + sexor_binary_2 + post_covid*sexor_binary_2 + hgage + ed_degree + any_children + helth + married, data = ps_matches, model = "within")
summary(DiD5.5_PM) # Model fit not good.

```

## 6: Poverty.

### 6.1: Pooled, between, fixed, and random effects.

#### 6.1.1: Regular.

```{r}

# Pooling.
plm6.1p <- plm(in_poverty ~ in_poverty_lag1 + in_poverty_lag2 + sexor_binary_2 + hgage + female + ed_degree + any_children + helth + hhstate + married + immigrant, data = hilda_2, model = "pooling")
summary(plm6.1p)

# Between.
plm6.1b <- plm(in_poverty ~ in_poverty_lag1 + in_poverty_lag2 + sexor_binary_2 + hgage + female + ed_degree + any_children + helth + hhstate + married + immigrant, data = hilda_2, model = "between")
summary(plm6.1b)

# Fixed.
plm6.1f <- plm(in_poverty ~ in_poverty_lag1 + in_poverty_lag2 + sexor_binary_2 + hgage + ed_degree + any_children + helth + hhstate + married, data = hilda_2, model = "within", weights = lnwtrp)
summary(plm6.1f)

# Random.
plm6.1r <- plm(in_poverty ~ in_poverty_lag1 + in_poverty_lag2 + sexor_binary_2 + hgage + female + ed_degree + any_children + helth + hhstate + married + immigrant, data = hilda_2, model = "random", weights = lnwtrp)
summary(plm6.1r)

# Hausman test.
hausman6.1 <- phtest(plm6.1f, plm6.1r)
hausman6.1 # Shouldn't use random.

# poverty: pooled, between, fixed, and random effects.
stargazer(plm6.1p, plm6.1b, plm6.1f, plm6.1r,
          type = "html",
          out = "poverty611.html",
          title = "HILDA poverty, All Sexes",
          align = TRUE,
          keep.stat = c("n", "rsq", "adj.rsq"),
          no.space = TRUE)

# Pooling.
plm6.1pM <- plm(in_poverty ~ in_poverty_lag1 + in_poverty_lag2 + q_man + hgage + ed_degree + any_children + helth + hhstate + married + immigrant, data = hilda_2, model = "pooling")
summary(plm6.1pM)

# Between.
plm6.1bM <- plm(in_poverty ~ in_poverty_lag1 + in_poverty_lag2 + q_man + hgage + ed_degree + any_children + helth + hhstate + married + immigrant, data = hilda_2, model = "between")
summary(plm6.1bM)

# Fixed.
plm6.1fM <- plm(in_poverty ~ in_poverty_lag1 + in_poverty_lag2 + q_man + hgage + ed_degree + any_children + helth + hhstate + married, data = hilda_2, model = "within", weights = lnwtrp)
summary(plm6.1fM)

# Random.
plm6.1rM <- plm(in_poverty ~ in_poverty_lag1 + in_poverty_lag2 + q_man + hgage + ed_degree + any_children + helth + hhstate + married + immigrant, data = hilda_2, model = "random", weights = lnwtrp)
summary(plm6.1rM)

# Hausman test.
hausman6.1M <- phtest(plm6.1fM, plm6.1rM)
hausman6.1M # Shouldn't use random.

# poverty: pooled, between, fixed, and random effects.
stargazer(plm6.1pM, plm6.1bM, plm6.1fM, plm6.1rM,
          type = "html",
          out = "poverty611M.html",
          title = "HILDA poverty, Male",
          align = TRUE,
          keep.stat = c("n", "rsq", "adj.rsq"),
          no.space = TRUE)

# Pooling.
plm6.1pF <- plm(in_poverty ~ in_poverty_lag1 + in_poverty_lag2 + q_woman + hgage + ed_degree + any_children + helth + hhstate + married + immigrant, data = hilda_2, model = "pooling")
summary(plm6.1pF)

# Between.
plm6.1bF <- plm(in_poverty ~ in_poverty_lag1 + in_poverty_lag2 + q_woman + hgage + ed_degree + any_children + helth + hhstate + married + immigrant, data = hilda_2, model = "between")
summary(plm6.1bF)

# Fixed.
plm6.1fF <- plm(in_poverty ~ in_poverty_lag1 + in_poverty_lag2 + q_woman + hgage + ed_degree + any_children + helth + hhstate + married, data = hilda_2, model = "within", weights = lnwtrp)
summary(plm6.1fF)

# Random.
plm6.1rF <- plm(in_poverty ~ in_poverty_lag1 + in_poverty_lag2 + q_woman + hgage + ed_degree + any_children + helth + hhstate + married + immigrant, data = hilda_2, model = "random", weights = lnwtrp)
summary(plm6.1rF)

# Hausman test.
hausman6.1F <- phtest(plm6.1fF, plm6.1rF)
hausman6.1F # Shouldn't use random.

# poverty: pooled, between, fixed, and random effects.
stargazer(plm6.1pF, plm6.1bF, plm6.1fF, plm6.1rF,
          type = "html",
          out = "poverty611F.html",
          title = "HILDA poverty, Female",
          align = TRUE,
          keep.stat = c("n", "rsq", "adj.rsq"),
          no.space = TRUE)


htmlreg(list(plm6.1p, plm6.1b, plm6.1f, plm6.1r,
             plm6.1pM, plm6.1bM, plm6.1fM, plm6.1rM,
             plm6.1pF, plm6.1bF, plm6.1fF, plm6.1rF),
        file = "poverty_combined_plm47.html",
        title = "Figure 4.7: HILDA Poverty: Pooled, Between, Fixed, and Random Effects Models",
        caption = "HILDA Poverty: Pooled, Between, Fixed, and Random Effects Models",
        caption.above = TRUE,
        label = "tab:income_combined_plm47",
        custom.model.names = c("Pooled", "Between", "Fixed", "Random",
                               "Pooled (M)", "Between (M)", "Fixed (M)", "Random (M)",
                               "Pooled (F)", "Between (F)", "Fixed (F)", "Random (F)"),
        custom.coef.map = list("in_poverty_lag1" = "Poverty (Lag 1)",
                               "in_poverty_lag2" = "Poverty (Lag 2)",
                               "sexor_binary_2" = "Sexual Orientation (Binary)",
                               "hgage" = "Age",
                               "female" = "Female",
                               "ed_degree" = "Education Degree",
                               "any_children" = "Any Children",
                               "helth" = "Disabled",
                               "hhstate" = "Household State",
                               "married" = "Married",
                               "immigrant" = "Immigrant",
                               "q_man" = "Gay or bisexual man",
                               "q_woman" = "Lesbian or bisexual woman"),
        include.rsquared = TRUE,
        include.adjrs = TRUE,
        include.nobs = TRUE,
        single.row = FALSE,
        stars = c(0.01, 0.05, 0.1))

```

#### 6.1.2: PS matched.

```{r}

# Pooling.
plm6.1ps_p <- plm(in_poverty ~ in_poverty_lag1 + in_poverty_lag2 + sexor_binary_2 + hgage + female + ed_degree + any_children + helth + hhstate + married + immigrant, data = ps_matches, model = "pooling")
summary(plm6.1ps_p)

# Between.
plm6.1ps_b <- plm(in_poverty ~ in_poverty_lag1 + in_poverty_lag2 + sexor_binary_2 + hgage + female + ed_degree + any_children + helth + hhstate + married + immigrant, data = ps_matches, model = "between")
summary(plm6.1ps_b)

# Fixed.
plm6.1ps_f <- plm(in_poverty ~ in_poverty_lag1 + in_poverty_lag2 + sexor_binary_2 + hgage + ed_degree + any_children + helth + hhstate + married, data = ps_matches, model = "within", weights = lnwtrp)
summary(plm6.1ps_f)

# Random.
plm6.1ps_r <- plm(in_poverty ~ in_poverty_lag1 + in_poverty_lag2 + sexor_binary_2 + hgage + female + ed_degree + any_children + helth + hhstate + married + immigrant, data = ps_matches, model = "random", weights = lnwtrp)
summary(plm6.1ps_r)

# Hausman test.
hausman6.1_ps <- phtest(plm6.1ps_f, plm6.1ps_r)
hausman6.1_ps # Shouldn't use random.

# PS matched: pooled, between, fixed, and random effects.
stargazer(plm6.1ps_p, plm6.1ps_b, plm6.1ps_f, plm6.1ps_r,
          type = "html",
          out = "poverty612.html",
          title = "HILDA poverty: propensity score matched pooled, between, fixed, and random effects",
          align = TRUE,
          keep.stat = c("n", "rsq", "adj.rsq"),
          no.space = TRUE)

# Pooling.
plm6.1ps_pM <- plm(in_poverty ~ in_poverty_lag1 + in_poverty_lag2 + q_man + hgage + ed_degree + any_children + helth + hhstate + married + immigrant, data = ps_matches, model = "pooling")
summary(plm6.1ps_pM)

# Between.
plm6.1ps_bM <- plm(in_poverty ~ in_poverty_lag1 + in_poverty_lag2 + q_man + hgage + ed_degree + any_children + helth + hhstate + married + immigrant, data = ps_matches, model = "between")
summary(plm6.1ps_bM)

# Fixed.
plm6.1ps_fM <- plm(in_poverty ~ in_poverty_lag1 + in_poverty_lag2 + q_man + hgage + ed_degree + any_children + helth + hhstate + married, data = ps_matches, model = "within", weights = lnwtrp)
summary(plm6.1ps_fM)

# Random.
plm6.1ps_rM <- plm(in_poverty ~ in_poverty_lag1 + in_poverty_lag2 + q_man + hgage + ed_degree + any_children + helth + hhstate + married + immigrant, data = ps_matches, model = "random", weights = lnwtrp)
summary(plm6.1ps_rM)

# Hausman test.
hausman6.1_psM <- phtest(plm6.1ps_fM, plm6.1ps_rM)
hausman6.1_psM # Shouldn't use random.

# PS matched: pooled, between, fixed, and random effects.
stargazer(plm6.1ps_pM, plm6.1ps_bM, plm6.1ps_fM, plm6.1ps_rM,
          type = "html",
          out = "poverty612M.html",
          title = "HILDA poverty: propensity score matched, Males",
          align = TRUE,
          keep.stat = c("n", "rsq", "adj.rsq"),
          no.space = TRUE)

# Pooling.
plm6.1ps_pF <- plm(in_poverty ~ in_poverty_lag1 + in_poverty_lag2 + q_woman + hgage + ed_degree + any_children + helth + hhstate + married + immigrant, data = ps_matches, model = "pooling")
summary(plm6.1ps_pF)

# Between.
plm6.1ps_bF <- plm(in_poverty ~ in_poverty_lag1 + in_poverty_lag2 + q_woman + hgage + ed_degree + any_children + helth + hhstate + married + immigrant, data = ps_matches, model = "between")
summary(plm6.1ps_bF)

# Fixed.
plm6.1ps_fF <- plm(in_poverty ~ in_poverty_lag1 + in_poverty_lag2 + q_woman + hgage + ed_degree + any_children + helth + hhstate + married, data = ps_matches, model = "within", weights = lnwtrp)
summary(plm6.1ps_fF)

# Random.
plm6.1ps_rF <- plm(in_poverty ~ in_poverty_lag1 + in_poverty_lag2 + q_woman + hgage + ed_degree + any_children + helth + hhstate + married + immigrant, data = ps_matches, model = "random", weights = lnwtrp)
summary(plm6.1ps_rF)

# Hausman test.
hausman6.1_psF <- phtest(plm6.1ps_fF, plm6.1ps_rF)
hausman6.1_psF # Shouldn't use random.

# PS matched: pooled, between, fixed, and random effects.
stargazer(plm6.1ps_pF, plm6.1ps_bF, plm6.1ps_fF, plm6.1ps_rF,
          type = "html",
          out = "poverty612F.html",
          title = "HILDA poverty: propensity score matched, Females",
          align = TRUE,
          keep.stat = c("n", "rsq", "adj.rsq"),
          no.space = TRUE)

htmlreg(list(plm6.1ps_p, plm6.1ps_b, plm6.1ps_f, plm6.1ps_r,
             plm6.1ps_pM, plm6.1ps_bM, plm6.1ps_fM, plm6.1ps_rM,
             plm6.1ps_pF, plm6.1ps_bF, plm6.1ps_fF, plm6.1ps_rF),
        file = "ps_score_poverty.html",
        title = "Table 4.8: HILDA Poverty: Inverse Probability of Treatment Weighted Models",
        caption = "HILDA Poverty: Propensity Score Matched Models",
        caption.above = TRUE,
        label = "tab:ps_score_poverty",
        custom.model.names = c("Pooled", "Between", "Fixed", "Random",
                               "Pooled (M)", "Between (M)", "Fixed (M)", "Random (M)",
                               "Pooled (F)", "Between (F)", "Fixed (F)", "Random (F)"),
        custom.coef.map = list("in_poverty_lag1" = "Poverty (Lag 1)",
                               "in_poverty_lag2" = "Poverty (Lag 2)",
                               "sexor_binary_2" = "Sexual Orientation (Binary)",
                               "hgage" = "Age",
                               "female" = "Female",
                               "ed_degree" = "Education Degree",
                               "any_children" = "Any Children",
                               "helth" = "Disabled",
                               "hhstate" = "Household State",
                               "married" = "Married",
                               "immigrant" = "Immigrant",
                               "q_man" = "Gay or bisexual man",
                               "q_woman" = "Lesbian or bisexual woman"),
        include.rsquared = TRUE,
        include.adjrs = TRUE,
        include.nobs = TRUE,
        single.row = TRUE,
        stars = c(0.01, 0.05, 0.1))

```

#### 6.1.3: IPT weighted.

```{r}

# Pooling.
plm6.1ipt_p <- plm(in_poverty ~ in_poverty_lag1 + in_poverty_lag2 + sexor_binary_2 + hgage + female + ed_degree + any_children + helth + hhstate + married + immigrant, data = hilda_2, model = "pooling", weights = final_ipt_weights)
summary(plm6.1ipt_p)

# Between.
plm6.1ipt_b <- plm(in_poverty ~ in_poverty_lag1 + in_poverty_lag2 + sexor_binary_2 + hgage + female + ed_degree + any_children + helth + hhstate + married + immigrant, data = hilda_2, model = "between")
summary(plm6.1ipt_b)

# Fixed.
plm6.1ipt_f <- plm(in_poverty ~ in_poverty_lag1 + in_poverty_lag2 + sexor_binary_2 + hgage + ed_degree + any_children + helth + hhstate + married, data = hilda_2, model = "within", weights = final_ipt_weights)
summary(plm6.1ipt_f)

# Random.
plm6.1ipt_r <- plm(in_poverty ~ in_poverty_lag1 + in_poverty_lag2 + sexor_binary_2 + hgage + female + ed_degree + any_children + helth + hhstate + married + immigrant, data = hilda_2, model = "random", weights = final_ipt_weights)
summary(plm6.1ipt_r)

# Hausman test.
hausman6.1_ipt <- phtest(plm6.1ipt_f, plm6.1ipt_r)
hausman6.1_ipt # Shouldn't use random.

# IPT weighted: pooled, between, fixed, and random effects.
stargazer(plm6.1ipt_p, plm6.1ipt_b, plm6.1ipt_f, plm6.1ipt_r,
          type = "html",
          out = "poverty613.html",
          title = "HILDA poverty: inversity probability of treatment weighted pooled, between, fixed, and random effects",
          align = TRUE,
          keep.stat = c("n", "rsq", "adj.rsq"),
          no.space = TRUE)

# Pooling.
plm6.1ipt_pM <- plm(in_poverty ~ in_poverty_lag1 + in_poverty_lag2 + q_man + hgage + ed_degree + any_children + helth + hhstate + married + immigrant, data = hilda_2, model = "pooling", weights = final_ipt_weights)
summary(plm6.1ipt_pM)

# Between.
plm6.1ipt_bM <- plm(in_poverty ~ in_poverty_lag1 + in_poverty_lag2 + q_man + hgage + ed_degree + any_children + helth + hhstate + married + immigrant, data = hilda_2, model = "between")
summary(plm6.1ipt_bM)

# Fixed.
plm6.1ipt_fM <- plm(in_poverty ~ in_poverty_lag1 + in_poverty_lag2 + q_man + hgage + ed_degree + any_children + helth + hhstate + married, data = hilda_2, model = "within", weights = final_ipt_weights)
summary(plm6.1ipt_fM)

# Random.
plm6.1ipt_rM <- plm(in_poverty ~ in_poverty_lag1 + in_poverty_lag2 + q_man + hgage + ed_degree + any_children + helth + hhstate + married + immigrant, data = hilda_2, model = "random", weights = final_ipt_weights)
summary(plm6.1ipt_rM)

# Hausman test.
hausman6.1_iptM <- phtest(plm6.1ipt_fM, plm6.1ipt_rM)
hausman6.1_iptM # Shouldn't use random.

# IPT weighted: pooled, between, fixed, and random effects.
stargazer(plm6.1ipt_pM, plm6.1ipt_bM, plm6.1ipt_fM, plm6.1ipt_rM,
          type = "html",
          out = "poverty613M.html",
          title = "HILDA poverty: IPTW, Males",
          align = TRUE,
          keep.stat = c("n", "rsq", "adj.rsq"),
          no.space = TRUE)

# Pooling.
plm6.1ipt_pF <- plm(in_poverty ~ in_poverty_lag1 + in_poverty_lag2 + q_woman + hgage + ed_degree + any_children + helth + hhstate + married + immigrant, data = hilda_2, model = "pooling", weights = final_ipt_weights)
summary(plm6.1ipt_pF)

# Between.
plm6.1ipt_bF <- plm(in_poverty ~ in_poverty_lag1 + in_poverty_lag2 + q_woman + hgage + ed_degree + any_children + helth + hhstate + married + immigrant, data = hilda_2, model = "between")
summary(plm6.1ipt_bF)

# Fixed.
plm6.1ipt_fF <- plm(in_poverty ~ in_poverty_lag1 + in_poverty_lag2 + q_woman + hgage + ed_degree + any_children + helth + hhstate + married, data = hilda_2, model = "within", weights = final_ipt_weights)
summary(plm6.1ipt_fF)

# Random.
plm6.1ipt_rF <- plm(in_poverty ~ in_poverty_lag1 + in_poverty_lag2 + q_woman + hgage + ed_degree + any_children + helth + hhstate + married + immigrant, data = hilda_2, model = "random", weights = final_ipt_weights)
summary(plm6.1ipt_rF)

# Hausman test.
hausman6.1_iptF <- phtest(plm6.1ipt_fF, plm6.1ipt_rF)
hausman6.1_iptF # Shouldn't use random.

# IPT weighted: pooled, between, fixed, and random effects.
stargazer(plm6.1ipt_pF, plm6.1ipt_bF, plm6.1ipt_fF, plm6.1ipt_rF,
          type = "html",
          out = "poverty613F.html",
          title = "HILDA poverty: IPTW, Females",
          align = TRUE,
          keep.stat = c("n", "rsq", "adj.rsq"),
          no.space = TRUE)

htmlreg(list(plm6.1ipt_p, plm6.1ipt_b, plm6.1ipt_f, plm6.1ipt_r,
             plm6.1ipt_pM, plm6.1ipt_bM, plm6.1ipt_fM, plm6.1ipt_rM,
             plm6.1ipt_pF, plm6.1ipt_bF, plm6.1ipt_fF, plm6.1ipt_rF),
        file = "poverty_combined_plm51_ipt.html",
        title = "Table 4.8: HILDA Poverty: Inverse Probability of Treatment Weighted Models",
        caption = "HILDA Poverty: Inverse Probability of Treatment Weighted Models",
        caption.above = TRUE,
        label = "tab:poverty_combined_plm51_ipt",
        custom.model.names = c("Pooled", "Between", "Fixed", "Random",
                               "Pooled (M)", "Between (M)", "Fixed (M)", "Random (M)",
                               "Pooled (F)", "Between (F)", "Fixed (F)", "Random (F)"),
        custom.coef.map = list("in_poverty_lag1" = "Poverty (Lag 1)",
                               "in_poverty_lag2" = "Poverty (Lag 2)",
                               "sexor_binary_2" = "Sexual Orientation (Binary)",
                               "hgage" = "Age",
                               "female" = "Female",
                               "ed_degree" = "Education Degree",
                               "any_children" = "Any Children",
                               "helth" = "Disabled",
                               "hhstate" = "Household State",
                               "married" = "Married",
                               "immigrant" = "Immigrant",
                               "q_man" = "Gay or bisexual man",
                               "q_woman" = "Lesbian or bisexual woman"),
        include.rsquared = TRUE,
        include.adjrs = TRUE,
        include.nobs = TRUE,
        single.row = TRUE,
        stars = c(0.01, 0.05, 0.1))

```

### 6.2: Random effects w/ varying slopes.

#### 6.2.1: Regular

```{r}

# Random.
plm6.2r <- lmer(in_poverty ~ in_poverty_lag1 + in_poverty_lag2 + sexor_binary_2 + hgage + female + ed_degree + any_children + helth + married + immigrant + (1 + sexor_binary_2 | xwaveid) + (1 | hhrhid), data = hilda_2, REML = TRUE, weights = lnwtrp)
summary(plm6.2r) # Model fit isn't great.

rsq_plm6.2r <- r.squaredGLMM(plm6.2r) # R-squared for the whole model is very high.

# Random.
plm6.2rM <- lmer(in_poverty ~ in_poverty_lag1 + in_poverty_lag2 + q_man + hgage + female + ed_degree + any_children + helth + married + immigrant + (1 + sexor_binary_2 | xwaveid) + (1 | hhrhid), data = hilda_2, REML = TRUE, weights = lnwtrp)
summary(plm6.2rM) # Model fit isn't great.

rsq_plm6.2rM <- r.squaredGLMM(plm6.2rM) # R-squared for the whole model is very high.

# Random.
plm6.2rF <- lmer(in_poverty ~ in_poverty_lag1 + in_poverty_lag2 + q_woman + hgage + female + ed_degree + any_children + helth + married + immigrant + (1 + sexor_binary_2 | xwaveid) + (1 | hhrhid), data = hilda_2, REML = TRUE, weights = lnwtrp)
summary(plm6.2rF) # Model fit isn't great.

rsq_plm6.2rF <- r.squaredGLMM(plm6.2rF) # R-squared for the whole model is very high.


```

#### 6.2.2: IPT weighted

```{r}

# Random.
plm6.2ipt_r <- lmer(in_poverty ~ in_poverty_lag1 + in_poverty_lag2 + sexor_binary_2 + hgage + female + ed_degree + any_children + helth + married + immigrant + (1 + sexor_binary_2 | xwaveid) + (1 | hhrhid), data = hilda_2, REML = TRUE, weights = final_ipt_weights)
summary(plm6.2ipt_r) # Model fit isn't great.

rsq_plm6.2ipt_r <- r.squaredGLMM(plm6.2ipt_r) # R-squared for the whole model is very high.
rsq_plm6.2ipt_r

# Random.
plm6.2ipt_rM <- lmer(in_poverty ~ in_poverty_lag1 + in_poverty_lag2 + q_man + hgage + female + ed_degree + any_children + helth + married + immigrant + (1 + sexor_binary_2 | xwaveid) + (1 | hhrhid), data = hilda_2, REML = TRUE, weights = final_ipt_weights)
summary(plm6.2ipt_rM) # Model fit isn't great.

rsq_plm6.2ipt_rM <- r.squaredGLMM(plm6.2ipt_rM) # R-squared for the whole model is very high.
rsq_plm6.2ipt_rM

# Random.
plm6.2ipt_rF <- lmer(in_poverty ~ in_poverty_lag1 + in_poverty_lag2 + q_woman + hgage + female + ed_degree + any_children + helth + married + immigrant + (1 + sexor_binary_2 | xwaveid) + (1 | hhrhid), data = hilda_2, REML = TRUE, weights = final_ipt_weights)
summary(plm6.2ipt_rF) # Model fit isn't great.

rsq_plm6.2ipt_rF <- r.squaredGLMM(plm6.2ipt_rF) # R-squared for the whole model is very high.
rsq_plm6.2ipt_rF

# Random effects.
htmlreg(list(plm6.2r, plm6.2rM, plm6.2rF,
             plm6.2ipt_r, plm6.2ipt_rM, plm6.2ipt_rF),
        file = "poverty_combined_plm52.html",
        title = "Table 4.9: HILDA Poverty: Random Effects Models",
        caption = "HILDA Poverty: Linear Mixed Effects Models",
        caption.above = TRUE,
        label = "tab:poverty_combined_plm52",
        custom.model.names = c("Random", "Random (M)", "Random (F)",
                               "Random (IPT)", "Random (IPT, M)", "Random (IPT, F)"),
        custom.coef.map = list("in_poverty_lag1" = "Poverty (Lag 1)",
                               "in_poverty_lag2" = "Poverty (Lag 2)",
                               "sexor_binary_2" = "Sexual Orientation (Binary)",
                               "hgage" = "Age",
                               "female" = "Female",
                               "ed_degree" = "Education Degree",
                               "any_children" = "Any Children",
                               "helth" = "Disabled",
                               "married" = "Married",
                               "immigrant" = "Immigrant",
                               "q_man" = "Gay or bisexual man",
                               "q_woman" = "Lesbian or bisexual woman"),
        include.aic = TRUE,
        include.bic = TRUE,
        include.nobs = TRUE,
        include.rsquared = TRUE,
        include.adjrs = TRUE,
        single.row = TRUE,
        stars = c(0.01, 0.05, 0.1),
        omit.coef = c("(Intercept)", "Var: hhrhid", "Var: xwaveid", "Var: xwaveid sexor_binary_2", "Cov: xwaveid (Intercept) sexor_binary_2"))

```

### 6.3: MBAW MLE.

```{r}

# In Stata.

```

### 6.4: DML for CI.

```{r}

# Creating data table.
hilda_DMLp <- hilda_2 %>%
  select(in_poverty, sexor_binary_2, hgage, female, ed_degree, any_children, helth, hhsos, hhstate, married, immigrant, hhrhid, hhiu, wave, xwaveid, in_poverty_lag1, in_poverty_lag2) %>%
  tidyr::drop_na()

hilda_DMLp <- as.data.table(hilda_DMLp)

# Making hhiu a factor.
hilda_DMLp$hhiu <- as_factor(hilda_DMLp$hhiu)
str(hilda_DMLp$hhiu)

# Identifying outcome variable, treatment variable, and other covariates.
outcome1p <- "in_poverty"
treatment1p <- "sexor_binary_2"
covars1p <- setdiff(names(hilda_DMLp), c("xwaveid", "wave", outcome1p, treatment1p))

# Creating DoubleMLData object.
hilda_DMLobj_p <- DoubleMLData$new(hilda_DMLp, y_col = outcome1p, d_cols = treatment1p, x_cols = covars1p)

# Fitting the DML model.
learner1p = lrn("regr.ranger", num.trees = 500)

# Creating DoubleMLPLR object
dml_plr1p = DoubleMLPLR$new(hilda_DMLobj_p, ml_l = learner1p, ml_m = learner1p)

dml_plr1p$fit()

# Interpretation:
# Get the estimated treatment effect
theta_hat1p = dml_plr1p$coef
theta_hat1p

# Get the standard error and confidence intervals
se_hat1p = dml_plr1p$se
se_hat1p 

# Creating data table.
hilda_DMLpM <- hilda_2 %>%
  select(in_poverty, q_man, hgage, female, ed_degree, any_children, helth, hhsos, hhstate, married, immigrant, hhrhid, hhiu, wave, xwaveid, in_poverty_lag1, in_poverty_lag2) %>%
  tidyr::drop_na()

hilda_DMLpM <- as.data.table(hilda_DMLpM)

# Making hhiu a factor.
hilda_DMLpM$hhiu <- as_factor(hilda_DMLpM$hhiu)
str(hilda_DMLpM$hhiu)

# Identifying outcome variable, treatment variable, and other covariates.
outcome1pM <- "in_poverty"
treatment1pM <- "q_man"
covars1pM <- setdiff(names(hilda_DMLpM), c("xwaveid", "wave", outcome1pM, treatment1pM))

# Creating DoubleMLData object.
hilda_DMLobj_pM <- DoubleMLData$new(hilda_DMLpM, y_col = outcome1pM, d_cols = treatment1pM, x_cols = covars1pM)

# Fitting the DML model.
learner1pM = lrn("regr.ranger", num.trees = 500)

# Creating DoubleMLPLR object
dml_plr1pM = DoubleMLPLR$new(hilda_DMLobj_pM, ml_l = learner1pM, ml_m = learner1pM)

dml_plr1pM$fit()

# Interpretation:
# Get the estimated treatment effect
theta_hat1pM = dml_plr1pM$coef
theta_hat1pM

# Get the standard error and confidence intervals
se_hat1pM = dml_plr1pM$se
se_hat1pM 

# Creating data table.
hilda_DMLpF <- hilda_2 %>%
  select(in_poverty, q_woman, hgage, female, ed_degree, any_children, helth, hhsos, hhstate, married, immigrant, hhrhid, hhiu, wave, xwaveid, in_poverty_lag1, in_poverty_lag2) %>%
  tidyr::drop_na()

hilda_DMLpF<- as.data.table(hilda_DMLpF)

# Making hhiu a factor.
hilda_DMLpF$hhiu <- as_factor(hilda_DMLpF$hhiu)
str(hilda_DMLpF$hhiu)

# Identifying outcome variable, treatment variable, and other covariates.
outcome1pF<- "in_poverty"
treatment1pF<- "q_woman"
covars1pF <- setdiff(names(hilda_DMLpF), c("xwaveid", "wave", outcome1pF, treatment1pF))

# Creating DoubleMLData object.
hilda_DMLobj_pF<- DoubleMLData$new(hilda_DMLpF, y_col = outcome1pF, d_cols = treatment1pF, x_cols = covars1pF)

# Fitting the DML model.
learner1pF= lrn("regr.ranger", num.trees = 500)

# Creating DoubleMLPLR object
dml_plr1pF= DoubleMLPLR$new(hilda_DMLobj_pF, ml_l = learner1pF, ml_m = learner1pF)

dml_plr1pF$fit()

# Interpretation:
# Get the estimated treatment effect
theta_hat1pF= dml_plr1pF$coef
theta_hat1pF

# Get the standard error and confidence intervals
se_hat1pF= dml_plr1pF$se
se_hat1pF

```

### 6.5 Matched, pooled DiD.

```{r}

# Propensity scores. Fixed effects models.

# Covid-19.
DiD6.5_PC <- plm(in_poverty ~ in_poverty_lag1 + in_poverty_lag2 + in_poverty_lag1 + in_poverty_lag2 + post_covid + sexor_binary_2 + post_covid*sexor_binary_2 + hgage + ed_degree + any_children + helth + married, data = ps_matches, model = "within")
summary(DiD6.5_PC) # Model fit not good.

# Marriage equality.
DiD6.5_PM <- plm(in_poverty ~ in_poverty_lag1 + in_poverty_lag2 + in_poverty_lag1 + in_poverty_lag2 + post_mar + sexor_binary_2 + post_covid*sexor_binary_2 + hgage + ed_degree + any_children + helth + married, data = ps_matches, model = "within")
summary(DiD6.5_PM) # Model fit not good.

```

### 7.1: Pooled, between, fixed, and random effects.

#### 7.1.1: Regular.

```{r}

# Pooling.
plm7.1p <- plm(in_poverty2 ~ in_poverty2_lag1 + in_poverty2_lag2 + sexor_binary_2 + hgage + female + ed_degree + any_children + helth + hhstate + married + immigrant, data = hilda_2, model = "pooling")
summary(plm7.1p)

# Between.
plm7.1b <- plm(in_poverty2 ~ in_poverty2_lag1 + in_poverty2_lag2 + sexor_binary_2 + hgage + female + ed_degree + any_children + helth + hhstate + married + immigrant, data = hilda_2, model = "between")
summary(plm7.1b)

# Fixed.
plm7.1f <- plm(in_poverty2 ~ in_poverty2_lag1 + in_poverty2_lag2 + sexor_binary_2 + hgage + ed_degree + any_children + helth + hhstate + married, data = hilda_2, model = "within", weights = lnwtrp)
summary(plm7.1f)

# Random.
plm7.1r <- plm(in_poverty2 ~ in_poverty2_lag1 + in_poverty2_lag2 + sexor_binary_2 + hgage + female + ed_degree + any_children + helth + hhstate + married + immigrant, data = hilda_2, model = "random", weights = lnwtrp)
summary(plm7.1r)

# Hausman test.
hausman7.1 <- phtest(plm7.1f, plm7.1r)
hausman7.1 # Shouldn't use random.

# poverty2: pooled, between, fixed, and random effects.
stargazer(plm7.1p, plm7.1b, plm7.1f, plm7.1r,
          type = "html",
          out = "poverty2711.html",
          title = "HILDA poverty2, All Sexes",
          align = TRUE,
          keep.stat = c("n", "rsq", "adj.rsq"),
          no.space = TRUE)

# Pooling.
plm7.1pM <- plm(in_poverty2 ~ in_poverty2_lag1 + in_poverty2_lag2 + q_man + hgage + ed_degree + any_children + helth + hhstate + married + immigrant, data = hilda_2, model = "pooling")
summary(plm7.1pM)

# Between.
plm7.1bM <- plm(in_poverty2 ~ in_poverty2_lag1 + in_poverty2_lag2 + q_man + hgage + ed_degree + any_children + helth + hhstate + married + immigrant, data = hilda_2, model = "between")
summary(plm7.1bM)

# Fixed.
plm7.1fM <- plm(in_poverty2 ~ in_poverty2_lag1 + in_poverty2_lag2 + q_man + hgage + ed_degree + any_children + helth + hhstate + married, data = hilda_2, model = "within", weights = lnwtrp)
summary(plm7.1fM)

# Random.
plm7.1rM <- plm(in_poverty2 ~ in_poverty2_lag1 + in_poverty2_lag2 + q_man + hgage + ed_degree + any_children + helth + hhstate + married + immigrant, data = hilda_2, model = "random", weights = lnwtrp)
summary(plm7.1rM)

# Hausman test.
hausman7.1M <- phtest(plm7.1fM, plm7.1rM)
hausman7.1M # Shouldn't use random.

# poverty2: pooled, between, fixed, and random effects.
stargazer(plm7.1pM, plm7.1bM, plm7.1fM, plm7.1rM,
          type = "html",
          out = "poverty2711M.html",
          title = "HILDA poverty2, Male",
          align = TRUE,
          keep.stat = c("n", "rsq", "adj.rsq"),
          no.space = TRUE)

# Pooling.
plm7.1pF <- plm(in_poverty2 ~ in_poverty2_lag1 + in_poverty2_lag2 + q_woman + hgage + ed_degree + any_children + helth + hhstate + married + immigrant, data = hilda_2, model = "pooling")
summary(plm7.1pF)

# Between.
plm7.1bF <- plm(in_poverty2 ~ in_poverty2_lag1 + in_poverty2_lag2 + q_woman + hgage + ed_degree + any_children + helth + hhstate + married + immigrant, data = hilda_2, model = "between")
summary(plm7.1bF)

# Fixed.
plm7.1fF <- plm(in_poverty2 ~ in_poverty2_lag1 + in_poverty2_lag2 + q_woman + hgage + ed_degree + any_children + helth + hhstate + married, data = hilda_2, model = "within", weights = lnwtrp)
summary(plm7.1fF)

# Random.
plm7.1rF <- plm(in_poverty2 ~ in_poverty2_lag1 + in_poverty2_lag2 + q_woman + hgage + ed_degree + any_children + helth + hhstate + married + immigrant, data = hilda_2, model = "random", weights = lnwtrp)
summary(plm7.1rF)

# Hausman test.
hausman7.1F <- phtest(plm7.1fF, plm7.1rF)
hausman7.1F # Shouldn't use random.

# poverty2: pooled, between, fixed, and random effects.
stargazer(plm7.1pF, plm7.1bF, plm7.1fF, plm7.1rF,
          type = "html",
          out = "poverty2711F.html",
          title = "HILDA poverty2, Female",
          align = TRUE,
          keep.stat = c("n", "rsq", "adj.rsq"),
          no.space = TRUE)


htmlreg(list(plm7.1p, plm7.1b, plm7.1f, plm7.1r,
             plm7.1pM, plm7.1bM, plm7.1fM, plm7.1rM,
             plm7.1pF, plm7.1bF, plm7.1fF, plm7.1rF),
        file = "poverty_combined_plm410.html",
        title = "Figure 4.10: HILDA Poverty: Pooled, Between, Fixed, and Random Effects Models",
        caption = "HILDA Poverty (Measure 2): Pooled, Between, Fixed, and Random Effects Models",
        caption.above = TRUE,
        label = "tab:income_combined_plm47",
        custom.model.names = c("Pooled", "Between", "Fixed", "Random",
                               "Pooled (M)", "Between (M)", "Fixed (M)", "Random (M)",
                               "Pooled (F)", "Between (F)", "Fixed (F)", "Random (F)"),
        custom.coef.map = list("in_poverty_lag1" = "Poverty (Lag 1)",
                               "in_poverty_lag2" = "Poverty (Lag 2)",
                               "sexor_binary_2" = "Sexual Orientation (Binary)",
                               "hgage" = "Age",
                               "female" = "Female",
                               "ed_degree" = "Education Degree",
                               "any_children" = "Any Children",
                               "helth" = "Disabled",
                               "hhstate" = "Household State",
                               "married" = "Married",
                               "immigrant" = "Immigrant",
                               "q_man" = "Gay or bisexual man",
                               "q_woman" = "Lesbian or bisexual woman"),
        include.rsquared = TRUE,
        include.adjrs = TRUE,
        include.nobs = TRUE,
        single.row = FALSE,
        stars = c(0.01, 0.05, 0.1))




```

#### 7.1.2: PS matched.

```{r}

# Pooling.
plm7.1ps_p <- plm(in_poverty2 ~ in_poverty2_lag1 + in_poverty2_lag2 + sexor_binary_2 + hgage + female + ed_degree + any_children + helth + hhstate + married + immigrant, data = ps_matches, model = "pooling")
summary(plm7.1ps_p)

# Between.
plm7.1ps_b <- plm(in_poverty2 ~ in_poverty2_lag1 + in_poverty2_lag2 + sexor_binary_2 + hgage + female + ed_degree + any_children + helth + hhstate + married + immigrant, data = ps_matches, model = "between")
summary(plm7.1ps_b)

# Fixed.
plm7.1ps_f <- plm(in_poverty2 ~ in_poverty2_lag1 + in_poverty2_lag2 + sexor_binary_2 + hgage + ed_degree + any_children + helth + hhstate + married, data = ps_matches, model = "within", weights = lnwtrp)
summary(plm7.1ps_f)

# Random.
plm7.1ps_r <- plm(in_poverty2 ~ in_poverty2_lag1 + in_poverty2_lag2 + sexor_binary_2 + hgage + female + ed_degree + any_children + helth + hhstate + married + immigrant, data = ps_matches, model = "random", weights = lnwtrp)
summary(plm7.1ps_r)

# Hausman test.
hausman7.1_ps <- phtest(plm7.1ps_f, plm7.1ps_r)
hausman7.1_ps # Shouldn't use random.

# PS matched: pooled, between, fixed, and random effects.
stargazer(plm7.1ps_p, plm7.1ps_b, plm7.1ps_f, plm7.1ps_r,
          type = "html",
          out = "poverty2712.html",
          title = "HILDA poverty2: propensity score matched pooled, between, fixed, and random effects",
          align = TRUE,
          keep.stat = c("n", "rsq", "adj.rsq"),
          no.space = TRUE)

# Pooling.
plm7.1ps_pM <- plm(in_poverty2 ~ in_poverty2_lag1 + in_poverty2_lag2 + q_man + hgage + ed_degree + any_children + helth + hhstate + married + immigrant, data = ps_matches, model = "pooling")
summary(plm7.1ps_pM)

# Between.
plm7.1ps_bM <- plm(in_poverty2 ~ in_poverty2_lag1 + in_poverty2_lag2 + q_man + hgage + ed_degree + any_children + helth + hhstate + married + immigrant, data = ps_matches, model = "between")
summary(plm7.1ps_bM)

# Fixed.
plm7.1ps_fM <- plm(in_poverty2 ~ in_poverty2_lag1 + in_poverty2_lag2 + q_man + hgage + ed_degree + any_children + helth + hhstate + married, data = ps_matches, model = "within", weights = lnwtrp)
summary(plm7.1ps_fM)

# Random.
plm7.1ps_rM <- plm(in_poverty2 ~ in_poverty2_lag1 + in_poverty2_lag2 + q_man + hgage + ed_degree + any_children + helth + hhstate + married + immigrant, data = ps_matches, model = "random", weights = lnwtrp)
summary(plm7.1ps_rM)

# Hausman test.
hausman7.1_psM <- phtest(plm7.1ps_fM, plm7.1ps_rM)
hausman7.1_psM # Shouldn't use random.

# PS matched: pooled, between, fixed, and random effects.
stargazer(plm7.1ps_pM, plm7.1ps_bM, plm7.1ps_fM, plm7.1ps_rM,
          type = "html",
          out = "poverty2712M.html",
          title = "HILDA poverty2: propensity score matched, Males",
          align = TRUE,
          keep.stat = c("n", "rsq", "adj.rsq"),
          no.space = TRUE)

# Pooling.
plm7.1ps_pF <- plm(in_poverty2 ~ in_poverty2_lag1 + in_poverty2_lag2 + q_woman + hgage + ed_degree + any_children + helth + hhstate + married + immigrant, data = ps_matches, model = "pooling")
summary(plm7.1ps_pF)

# Between.
plm7.1ps_bF <- plm(in_poverty2 ~ in_poverty2_lag1 + in_poverty2_lag2 + q_woman + hgage + ed_degree + any_children + helth + hhstate + married + immigrant, data = ps_matches, model = "between")
summary(plm7.1ps_bF)

# Fixed.
plm7.1ps_fF <- plm(in_poverty2 ~ in_poverty2_lag1 + in_poverty2_lag2 + q_woman + hgage + ed_degree + any_children + helth + hhstate + married, data = ps_matches, model = "within", weights = lnwtrp)
summary(plm7.1ps_fF)

# Random.
plm7.1ps_rF <- plm(in_poverty2 ~ in_poverty2_lag1 + in_poverty2_lag2 + q_woman + hgage + ed_degree + any_children + helth + hhstate + married + immigrant, data = ps_matches, model = "random", weights = lnwtrp)
summary(plm7.1ps_rF)

# Hausman test.
hausman7.1_psF <- phtest(plm7.1ps_fF, plm7.1ps_rF)
hausman7.1_psF # Shouldn't use random.

# PS matched: pooled, between, fixed, and random effects.
stargazer(plm7.1ps_pF, plm7.1ps_bF, plm7.1ps_fF, plm7.1ps_rF,
          type = "html",
          out = "poverty2712F.html",
          title = "HILDA poverty2: propensity score matched, Females",
          align = TRUE,
          keep.stat = c("n", "rsq", "adj.rsq"),
          no.space = TRUE)

```

#### 7.1.3: IPT weighted.

```{r}

# Pooling.
plm7.1ipt_p <- plm(in_poverty2 ~ in_poverty2_lag1 + in_poverty2_lag2 + sexor_binary_2 + hgage + female + ed_degree + any_children + helth + hhstate + married + immigrant, data = hilda_2, model = "pooling", weights = final_ipt_weights)
summary(plm7.1ipt_p)

# Between.
plm7.1ipt_b <- plm(in_poverty2 ~ in_poverty2_lag1 + in_poverty2_lag2 + sexor_binary_2 + hgage + female + ed_degree + any_children + helth + hhstate + married + immigrant, data = hilda_2, model = "between")
summary(plm7.1ipt_b)

# Fixed.
plm7.1ipt_f <- plm(in_poverty2 ~ in_poverty2_lag1 + in_poverty2_lag2 + sexor_binary_2 + hgage + ed_degree + any_children + helth + hhstate + married, data = hilda_2, model = "within", weights = final_ipt_weights)
summary(plm7.1ipt_f)

# Random.
plm7.1ipt_r <- plm(in_poverty2 ~ in_poverty2_lag1 + in_poverty2_lag2 + sexor_binary_2 + hgage + female + ed_degree + any_children + helth + hhstate + married + immigrant, data = hilda_2, model = "random", weights = final_ipt_weights)
summary(plm7.1ipt_r)

# Hausman test.
hausman7.1_ipt <- phtest(plm7.1ipt_f, plm7.1ipt_r)
hausman7.1_ipt # Shouldn't use random.

# IPT weighted: pooled, between, fixed, and random effects.
stargazer(plm7.1ipt_p, plm7.1ipt_b, plm7.1ipt_f, plm7.1ipt_r,
          type = "html",
          out = "poverty2713.html",
          title = "HILDA poverty2: inversity probability of treatment weighted pooled, between, fixed, and random effects",
          align = TRUE,
          keep.stat = c("n", "rsq", "adj.rsq"),
          no.space = TRUE)

# Pooling.
plm7.1ipt_pM <- plm(in_poverty2 ~ in_poverty2_lag1 + in_poverty2_lag2 + q_man + hgage + ed_degree + any_children + helth + hhstate + married + immigrant, data = hilda_2, model = "pooling", weights = final_ipt_weights)
summary(plm7.1ipt_pM)

# Between.
plm7.1ipt_bM <- plm(in_poverty2 ~ in_poverty2_lag1 + in_poverty2_lag2 + q_man + hgage + ed_degree + any_children + helth + hhstate + married + immigrant, data = hilda_2, model = "between")
summary(plm7.1ipt_bM)

# Fixed.
plm7.1ipt_fM <- plm(in_poverty2 ~ in_poverty2_lag1 + in_poverty2_lag2 + q_man + hgage + ed_degree + any_children + helth + hhstate + married, data = hilda_2, model = "within", weights = final_ipt_weights)
summary(plm7.1ipt_fM)

# Random.
plm7.1ipt_rM <- plm(in_poverty2 ~ in_poverty2_lag1 + in_poverty2_lag2 + q_man + hgage + ed_degree + any_children + helth + hhstate + married + immigrant, data = hilda_2, model = "random", weights = final_ipt_weights)
summary(plm7.1ipt_rM)

# Hausman test.
hausman7.1_iptM <- phtest(plm7.1ipt_fM, plm7.1ipt_rM)
hausman7.1_iptM # Shouldn't use random.

# IPT weighted: pooled, between, fixed, and random effects.
stargazer(plm7.1ipt_pM, plm7.1ipt_bM, plm7.1ipt_fM, plm7.1ipt_rM,
          type = "html",
          out = "poverty2713M.html",
          title = "HILDA poverty2: IPTW, Males",
          align = TRUE,
          keep.stat = c("n", "rsq", "adj.rsq"),
          no.space = TRUE)

# Pooling.
plm7.1ipt_pF <- plm(in_poverty2 ~ in_poverty2_lag1 + in_poverty2_lag2 + q_woman + hgage + ed_degree + any_children + helth + hhstate + married + immigrant, data = hilda_2, model = "pooling", weights = final_ipt_weights)
summary(plm7.1ipt_pF)

# Between.
plm7.1ipt_bF <- plm(in_poverty2 ~ in_poverty2_lag1 + in_poverty2_lag2 + q_woman + hgage + ed_degree + any_children + helth + hhstate + married + immigrant, data = hilda_2, model = "between")
summary(plm7.1ipt_bF)

# Fixed.
plm7.1ipt_fF <- plm(in_poverty2 ~ in_poverty2_lag1 + in_poverty2_lag2 + q_woman + hgage + ed_degree + any_children + helth + hhstate + married, data = hilda_2, model = "within", weights = final_ipt_weights)
summary(plm7.1ipt_fF)

# Random.
plm7.1ipt_rF <- plm(in_poverty2 ~ in_poverty2_lag1 + in_poverty2_lag2 + q_woman + hgage + ed_degree + any_children + helth + hhstate + married + immigrant, data = hilda_2, model = "random", weights = final_ipt_weights)
summary(plm7.1ipt_rF)

# Hausman test.
hausman7.1_iptF <- phtest(plm7.1ipt_fF, plm7.1ipt_rF)
hausman7.1_iptF # Shouldn't use random.

# IPT weighted: pooled, between, fixed, and random effects.
stargazer(plm7.1ipt_pF, plm7.1ipt_bF, plm7.1ipt_fF, plm7.1ipt_rF,
          type = "html",
          out = "poverty2713F.html",
          title = "HILDA poverty2: IPTW, Females",
          align = TRUE,
          keep.stat = c("n", "rsq", "adj.rsq"),
          no.space = TRUE)

htmlreg(list(plm7.1ipt_p, plm7.1ipt_b, plm7.1ipt_f, plm7.1ipt_r,
             plm7.1ipt_pM, plm7.1ipt_bM, plm7.1ipt_fM, plm7.1ipt_rM,
             plm7.1ipt_pF, plm7.1ipt_bF, plm7.1ipt_fF, plm7.1ipt_rF),
        file = "poverty_combined_plm51_ipt.html",
        title = "Table 4.8: HILDA Poverty: Inverse Probability of Treatment Weighted Models",
        caption = "HILDA Poverty (Measure 2): Inverse Probability of Treatment Weighted Models",
        caption.above = TRUE,
        label = "tab:poverty_combined_plm51_ipt",
        custom.model.names = c("Pooled", "Between", "Fixed", "Random",
                               "Pooled (M)", "Between (M)", "Fixed (M)", "Random (M)",
                               "Pooled (F)", "Between (F)", "Fixed (F)", "Random (F)"),
        custom.coef.map = list("in_poverty_lag1" = "Poverty (Lag 1)",
                               "in_poverty_lag2" = "Poverty (Lag 2)",
                               "sexor_binary_2" = "Sexual Orientation (Binary)",
                               "hgage" = "Age",
                               "female" = "Female",
                               "ed_degree" = "Education Degree",
                               "any_children" = "Any Children",
                               "helth" = "Disabled",
                               "hhstate" = "Household State",
                               "married" = "Married",
                               "immigrant" = "Immigrant",
                               "q_man" = "Gay or bisexual man",
                               "q_woman" = "Lesbian or bisexual woman"),
        include.rsquared = TRUE,
        include.adjrs = TRUE,
        include.nobs = TRUE,
        single.row = FALSE,
        stars = c(0.01, 0.05, 0.1))

```

### 7.2: Random effects w/ varying slopes.

#### 7.2.1: Regular

```{r}

# Random.
plm7.2r <- lmer(in_poverty2 ~ in_poverty2_lag1 + in_poverty2_lag2 + sexor_binary_2 + hgage + female + ed_degree + any_children + helth + married + immigrant + (1 + sexor_binary_2 | xwaveid) + (1 | hhrhid), data = hilda_2, REML = TRUE, weights = lnwtrp)
summary(plm7.2r) # Model fit isn't great.

rsq_plm7.2r <- r.squaredGLMM(plm7.2r) # R-squared for the whole model is very high.

# Random.
plm7.2rM <- lmer(in_poverty2 ~ in_poverty2_lag1 + in_poverty2_lag2 + q_man + hgage + female + ed_degree + any_children + helth + married + immigrant + (1 + sexor_binary_2 | xwaveid) + (1 | hhrhid), data = hilda_2, REML = TRUE, weights = lnwtrp)
summary(plm7.2rM) # Model fit isn't great.

rsq_plm7.2rM <- r.squaredGLMM(plm7.2rM) # R-squared for the whole model is very high.

# Random.
plm7.2rF <- lmer(in_poverty2 ~ in_poverty2_lag1 + in_poverty2_lag2 + q_woman + hgage + female + ed_degree + any_children + helth + married + immigrant + (1 + sexor_binary_2 | xwaveid) + (1 | hhrhid), data = hilda_2, REML = TRUE, weights = lnwtrp)
summary(plm7.2rF) # Model fit isn't great.

rsq_plm7.2rF <- r.squaredGLMM(plm7.2rF) # R-squared for the whole model is very high.


```

#### 7.2.2: IPT weighted

```{r}

# Random.
plm7.2ipt_r <- lmer(in_poverty2 ~ in_poverty2_lag1 + in_poverty2_lag2 + sexor_binary_2 + hgage + female + ed_degree + any_children + helth + married + immigrant + (1 + sexor_binary_2 | xwaveid) + (1 | hhrhid), data = hilda_2, REML = TRUE, weights = final_ipt_weights)
summary(plm7.2ipt_r) # Model fit isn't great.

rsq_plm7.2ipt_r <- r.squaredGLMM(plm7.2ipt_r) # R-squared for the whole model is very high.
rsq_plm7.2ipt_r

# Random.
plm7.2ipt_rM <- lmer(in_poverty2 ~ in_poverty2_lag1 + in_poverty2_lag2 + q_man + hgage + female + ed_degree + any_children + helth + married + immigrant + (1 + sexor_binary_2 | xwaveid) + (1 | hhrhid), data = hilda_2, REML = TRUE, weights = final_ipt_weights)
summary(plm7.2ipt_rM) # Model fit isn't great.

rsq_plm7.2ipt_rM <- r.squaredGLMM(plm7.2ipt_rM) # R-squared for the whole model is very high.
rsq_plm7.2ipt_rM

# Random.
plm7.2ipt_rF <- lmer(in_poverty2 ~ in_poverty2_lag1 + in_poverty2_lag2 + q_woman + hgage + female + ed_degree + any_children + helth + married + immigrant + (1 + sexor_binary_2 | xwaveid) + (1 | hhrhid), data = hilda_2, REML = TRUE, weights = final_ipt_weights)
summary(plm7.2ipt_rF) # Model fit isn't great.

rsq_plm7.2ipt_rF <- r.squaredGLMM(plm7.2ipt_rF) # R-squared for the whole model is very high.
rsq_plm7.2ipt_rF

# Random effects.
htmlreg(list(plm7.2r, plm7.2rM, plm7.2rF,
             plm7.2ipt_r, plm7.2ipt_rM, plm7.2ipt_rF),
        file = "poverty_combined_plm52.html",
        title = "Table 4.9: HILDA Poverty: Random Effects Models",
        caption = "HILDA Poverty (Measure 2): Linear Mixed Effects Models",
        caption.above = TRUE,
        label = "tab:poverty_combined_plm52",
        custom.model.names = c("Random", "Random (M)", "Random (F)",
                               "Random (IPT)", "Random (IPT, M)", "Random (IPT, F)"),
        custom.coef.map = list("in_poverty_lag1" = "Poverty (Lag 1)",
                               "in_poverty_lag2" = "Poverty (Lag 2)",
                               "sexor_binary_2" = "Sexual Orientation (Binary)",
                               "hgage" = "Age",
                               "female" = "Female",
                               "ed_degree" = "Education Degree",
                               "any_children" = "Any Children",
                               "helth" = "Disabled",
                               "married" = "Married",
                               "immigrant" = "Immigrant",
                               "q_man" = "Gay or bisexual man",
                               "q_woman" = "Lesbian or bisexual woman"),
        include.aic = TRUE,
        include.bic = TRUE,
        include.nobs = TRUE,
        include.rsquared = TRUE,
        include.adjrs = TRUE,
        single.row = TRUE,
        stars = c(0.01, 0.05, 0.1),
        omit.coef = c("(Intercept)", "Var: hhrhid", "Var: xwaveid", "Var: xwaveid sexor_binary_2", "Cov: xwaveid (Intercept) sexor_binary_2"))

```

### 7.3: MBAW MLE.

### 7.4 DML for CI.

```{r}

# Creating data table.
hilda_DMLp <- hilda_2 %>%
  select(in_poverty2, sexor_binary_2, hgage, female, ed_degree, any_children, helth, hhsos, hhstate, married, immigrant, hhrhid, hhiu, wave, xwaveid, in_poverty2_lag1, in_poverty2_lag2) %>%
  tidyr::drop_na()

hilda_DMLp <- as.data.table(hilda_DMLp)

# Making hhiu a factor.
hilda_DMLp$hhiu <- as_factor(hilda_DMLp$hhiu)
str(hilda_DMLp$hhiu)

# Identifying outcome variable, treatment variable, and other covariates.
outcome1p <- "in_poverty2"
treatment1p <- "sexor_binary_2"
covars1p <- setdiff(names(hilda_DMLp), c("xwaveid", "wave", outcome1p, treatment1p))

# Creating DoubleMLData object.
hilda_DMLobj_p <- DoubleMLData$new(hilda_DMLp, y_col = outcome1p, d_cols = treatment1p, x_cols = covars1p)

# Fitting the DML model.
learner1p = lrn("regr.ranger", num.trees = 500)

# Creating DoubleMLPLR object
dml_plr1p2 = DoubleMLPLR$new(hilda_DMLobj_p, ml_l = learner1p, ml_m = learner1p)

dml_plr1p2$fit()

# Interpretation:
# Get the estimated treatment effect
theta_hat1p2 = dml_plr1p2$coef
theta_hat1p2

# Get the standard error and confidence intervals
se_hat1p2 = dml_plr1p2$se
se_hat1p2 

# Creating data table.
hilda_DMLpM <- hilda_2 %>%
  select(in_poverty2, q_man, hgage, female, ed_degree, any_children, helth, hhsos, hhstate, married, immigrant, hhrhid, hhiu, wave, xwaveid, in_poverty2_lag1, in_poverty2_lag2) %>%
  tidyr::drop_na()

hilda_DMLpM <- as.data.table(hilda_DMLpM)

# Making hhiu a factor.
hilda_DMLpM$hhiu <- as_factor(hilda_DMLpM$hhiu)
str(hilda_DMLpM$hhiu)

# Identifying outcome variable, treatment variable, and other covariates.
outcome1pM <- "in_poverty2"
treatment1pM <- "q_man"
covars1pM <- setdiff(names(hilda_DMLpM), c("xwaveid", "wave", outcome1pM, treatment1pM))

# Creating DoubleMLData object.
hilda_DMLobj_pM <- DoubleMLData$new(hilda_DMLpM, y_col = outcome1pM, d_cols = treatment1pM, x_cols = covars1pM)

# Fitting the DML model.
learner1pM = lrn("regr.ranger", num.trees = 500)

# Creating DoubleMLPLR object
dml_plr1pM2 = DoubleMLPLR$new(hilda_DMLobj_pM, ml_l = learner1pM, ml_m = learner1pM)

dml_plr1pM2$fit()

# Interpretation:
# Get the estimated treatment effect
theta_hat1pM2 = dml_plr1pM2$coef
theta_hat1pM2

# Get the standard error and confidence intervals
se_hat1pM2 = dml_plr1pM2$se
se_hat1pM2 

# Creating data table.
hilda_DMLpF <- hilda_2 %>%
  select(in_poverty2, q_woman, hgage, female, ed_degree, any_children, helth, hhsos, hhstate, married, immigrant, hhrhid, hhiu, wave, xwaveid, in_poverty2_lag1, in_poverty2_lag2) %>%
  tidyr::drop_na()

hilda_DMLpF<- as.data.table(hilda_DMLpF)

# Making hhiu a factor.
hilda_DMLpF$hhiu <- as_factor(hilda_DMLpF$hhiu)
str(hilda_DMLpF$hhiu)

# Identifying outcome variable, treatment variable, and other covariates.
outcome1pF<- "in_poverty2"
treatment1pF<- "q_woman"
covars1pF <- setdiff(names(hilda_DMLpF), c("xwaveid", "wave", outcome1pF, treatment1pF))

# Creating DoubleMLData object.
hilda_DMLobj_pF<- DoubleMLData$new(hilda_DMLpF, y_col = outcome1pF, d_cols = treatment1pF, x_cols = covars1pF)

# Fitting the DML model.
learner1pF= lrn("regr.ranger", num.trees = 500)

# Creating DoubleMLPLR object
dml_plr1pF2 = DoubleMLPLR$new(hilda_DMLobj_pF, ml_l = learner1pF, ml_m = learner1pF)

dml_plr1pF2$fit()

# Interpretation:
# Get the estimated treatment effect
theta_hat1pF2 = dml_plr1pF2$coef
theta_hat1pF2

# Get the standard error and confidence intervals
se_hat1pF2 = dml_plr1pF2$se
se_hat1pF2

```

#### 7.4.1: Presenting DML results (all models).

```{r}

# Create a data frame with the DML results
dml_results <- data.frame(
  Outcome = c("In poverty (y/n)", "Poverty 2", "Unemployment spells", "Income (asinh transformed)"),
  Coefficient = c(theta_hat1p, theta_hat1p2, theta_hat1e, theta_hat1i),
  StandardError = c(se_hat1p, se_hat1p2, se_hat1e, se_hat1i)
)

# Create the table using stargazer
stargazer(dml_results, type = "html", summary = FALSE, digit.separator = ",",
          title = "HILDA Double Machine Learning Results",
          column.labels = c("Outcome", "Coefficient", "Standard Error"),
          out = "hilda_dml_results_table.html")

# Create a data frame with the DML results
dml_results <- data.frame(
  Outcome = c("Poverty", "Poverty 2", "Employment", "Income"),
  Coefficient = c(theta_hat1p, theta_hat1p2, theta_hat1e, theta_hat1i),
  LowerCI = c(theta_hat1p - 1.96*se_hat1p, theta_hat1p2 - 1.96*se_hat1p2, theta_hat1e - 1.96*se_hat1e, theta_hat1i - 1.96*se_hat1i),
  UpperCI = c(theta_hat1p + 1.96*se_hat1p, theta_hat1p2 + 1.96*se_hat1p2, theta_hat1e + 1.96*se_hat1e, theta_hat1i + 1.96*se_hat1i)
)

# Create the forest plot
ggplot(dml_results, aes(x = Outcome, y = Coefficient, ymin = LowerCI, ymax = UpperCI)) +
  geom_pointrange(color = "red4", size = 0.8) +
  geom_hline(yintercept = 0, linetype = "dashed", color = "black") +
  coord_flip() +
  theme_minimal() +
  theme(plot.background = element_rect(fill = "white", color = "white"),
        panel.background = element_rect(fill = "white", color = "white")) +
  labs(title = "Double Machine Learning for Causal Inference: Poverty, Income, and Employment",
       x = "Outcome", y = "Coefficient",
       caption = "Error bars represent 95% confidence intervals")

# Save the plot as an image file
ggsave("HILDA_dml_results_plot.png", width = 8, height = 6, dpi = 300)

# Men.
# Create a data frame with the DML results
dml_resultsM <- data.frame(
  Outcome = c("In poverty (y/n)", "Poverty 2", "Unemployment spells", "Income (asinh transformed)"),
  Coefficient = c(theta_hat1pM, theta_hat1pM2, theta_hat1eM, theta_hat1iM),
  StandardError = c(se_hat1pM, se_hat1pM2, se_hat1eM, se_hat1iM)
)

# Create the table using stargazer
stargazer(dml_resultsM, type = "html", summary = FALSE, digit.separator = ",",
          title = "HILDA Double Machine Learning Results, Males",
          column.labels = c("Outcome", "Coefficient", "Standard Error"),
          out = "hilda_dml_results_table_males.html")

# Create a data frame with the DML results
dml_resultsM <- data.frame(
  Outcome = c("Poverty", "Poverty 2", "Employment", "Income"),
  Coefficient = c(theta_hat1pM, theta_hat1pM2, theta_hat1eM, theta_hat1iM),
  LowerCI = c(theta_hat1pM - 1.96*se_hat1pM, theta_hat1pM - 1.96*se_hat1pM2, theta_hat1eM - 1.96*se_hat1eM, theta_hat1iM - 1.96*se_hat1iM),
  UpperCI = c(theta_hat1pM + 1.96*se_hat1pM, theta_hat1pM + 1.96*se_hat1pM2, theta_hat1eM + 1.96*se_hat1eM, theta_hat1iM + 1.96*se_hat1iM)
)

# Create the forest plot
ggplot(dml_resultsM, aes(x = Outcome, y = Coefficient, ymin = LowerCI, ymax = UpperCI)) +
  geom_pointrange(color = "red4", size = 0.8) +
  geom_hline(yintercept = 0, linetype = "dashed", color = "black") +
  coord_flip() +
  theme_minimal() +
  theme(plot.background = element_rect(fill = "white", color = "white"),
        panel.background = element_rect(fill = "white", color = "white")) +
  labs(title = "Double Machine Learning for Causal Inference: Poverty, Income, and Employment among Males",
       x = "Outcome", y = "Coefficient",
       caption = "Error bars represent 95% confidence intervals")

# Save the plot as an image file
ggsave("HILDA_dml_results_plot_males.png", width = 8, height = 6, dpi = 300)

# Women.
# Create a data frame with the DML results
dml_resultsF <- data.frame(
  Outcome = c("In poverty (y/n)", "Poverty 2", "UneFployment spells", "Income (asinh transformed)"),
  Coefficient = c(theta_hat1pF, theta_hat1pF2, theta_hat1eF, theta_hat1iF),
  StandardError = c(se_hat1pF, se_hat1pF2, se_hat1eF, se_hat1iF)
)

# Create the table using stargazer
stargazer(dml_resultsF, type = "html", summary = FALSE, digit.separator = ",",
          title = "HILDA Double Machine Learning Results, females",
          column.labels = c("Outcome", "Coefficient", "Standard Error"),
          out = "hilda_dml_results_table_females.html")

# Create a data frame with the DML results
dml_resultsF <- data.frame(
  Outcome = c("Poverty", "Poverty 2", "eFployment", "Income"),
  Coefficient = c(theta_hat1pF, theta_hat1pF2, theta_hat1eF, theta_hat1iF),
  LowerCI = c(theta_hat1pF - 1.96*se_hat1pF, theta_hat1pF2 - 1.96*se_hat1pF2, theta_hat1eF - 1.96*se_hat1eF, theta_hat1iF - 1.96*se_hat1iF),
  UpperCI = c(theta_hat1pF + 1.96*se_hat1pF, theta_hat1pF2 + 1.96*se_hat1pF2, theta_hat1eF + 1.96*se_hat1eF, theta_hat1iF + 1.96*se_hat1iF)
)

# Create the forest plot
ggplot(dml_resultsF, aes(x = Outcome, y = Coefficient, ymin = LowerCI, ymax = UpperCI)) +
  geom_pointrange(color = "red4", size = 0.8) +
  geom_hline(yintercept = 0, linetype = "dashed", color = "black") +
  coord_flip() +
  theme_minimal() +
  theme(plot.background = element_rect(fill = "white", color = "white"),
        panel.background = element_rect(fill = "white", color = "white")) +
  labs(title = "Double Machine Learning for Causal Inference: Poverty, Income, and Employment among Females",
       x = "Outcome", y = "Coefficient",
       caption = "Error bars represent 95% confidence intervals")

# Save the plot as an iFage file
ggsave("HILDA_dml_results_plot_females.png", width = 8, height = 6, dpi = 300)

View(dml_results)

```

```{r}

# Update the Label column in the dml_results data frame
dml_results$Label <- c("Poverty", "Income", "Poverty (2)", "Employment")

# Update the Label column in the dml_resultsM data frame
dml_resultsM$Label <- c("Poverty", "Income", "Poverty (2)", "Employment")

# Update the Label column in the dml_resultsF data frame
dml_resultsF$Label <- c("Poverty", "Income", "Poverty (2)", "Employment")

plot_all <- ggplot(dml_results, aes(x = Label, y = Coefficient, ymin = LowerCI, ymax = UpperCI)) +
  geom_pointrange(color = "purple", size = 0.8) +
  geom_hline(yintercept = 0, linetype = "dashed", color = "black") +
  coord_flip() +
  theme_minimal() +
  theme(plot.background = element_rect(fill = "white", color = "white"),
        panel.background = element_rect(fill = "white", color = "white"),
        axis.text.y = element_text(size = 10, hjust = 1)) +
  labs(title = "All",
       x = "Outcome", y = "Coefficient",
       caption = "")
plot_males <- ggplot(dml_resultsM, aes(x = Label, y = Coefficient, ymin = LowerCI, ymax = UpperCI)) +
  geom_pointrange(color = "blue2", size = 0.8) +
  geom_hline(yintercept = 0, linetype = "dashed", color = "black") +
  coord_flip() +
  theme_minimal() +
  theme(plot.background = element_rect(fill = "white", color = "white"),
        panel.background = element_rect(fill = "white", color = "white"),
        axis.text.y = element_blank(),
        axis.ticks.y = element_blank()) +
  labs(title = "Males",
       x = "", y = "Coefficient",
       caption = "")
plot_females <- ggplot(dml_resultsF, aes(x = Label, y = Coefficient, ymin = LowerCI, ymax = UpperCI)) +
  geom_pointrange(color = "blue4", size = 0.8) +
  geom_hline(yintercept = 0, linetype = "dashed", color = "black") +
  coord_flip() +
  theme_minimal() +
  theme(plot.background = element_rect(fill = "white", color = "white"),
        panel.background = element_rect(fill = "white", color = "white"),
        axis.text.y = element_blank(),
        axis.ticks.y = element_blank()) +
  labs(title = "Females",
       x = "", y = "Coefficient",
       caption = "Error bars represent 95% confidence intervals")
combined_plot <- ggarrange(plot_all, plot_males, plot_females,
                           ncol = 3, nrow = 1,
                           common.legend = TRUE, legend = "bottom")
# Add an overall title with white background using theme()
annotate_figure(combined_plot,
                top = text_grob("HILDA Double Machine Learning for Causal Inference: Poverty, Income, and Employment",
                                color = "black", face = "bold", size = 14))
ggsave("HILDA_dml_results_combined_plot.png", width = 12, height = 6, dpi = 300)

```

#### 7.4.2. Presenting results together.

## 8: Miscellaneous plots.

```{r}

mean_diu_19 <- hilda_2 %>%
  filter(wave == 19) %>%
  summarize(mean_diu = mean(disp_inc_2, na.rm = TRUE))

mean_diu_20 <- hilda_2 %>%
  filter(wave == 20) %>%
  summarize(mean_diu = mean(disp_inc_2, na.rm = TRUE))

mean_diu_19
mean_diu_20

```
