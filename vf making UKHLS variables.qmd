---
title: "2024.05.20 sensitive data analysis file"
author: "Simon Cooper"
format: html
editor: visual
---

# 2024.05.22 sensitive data analysis file

```{r setup, include=FALSE}

knitr::opts_chunk$set(root.dir = "C:/Users/sant6264/Downloads/UKHLS_analysis")

```

## Set up.

```{r}

# Clearing environment.
rm(list=ls())

# Confirming working directory.
getwd()

# Calling relevant packages.
library(pacman)

pacman::p_load(dplyr, AER, car, emmeans, fixest, fmsb, here, lattice, lme4, lmtest, 
               marginaleffects, Matrix, modelsummary, nlstools, plm, tidyverse, estimatr, 
               rdrobust, haven, labelled, dagitty, rddensity, knitr, kableExtra, stargazer, 
               broom, eeptools, panelr, plm, zoo, MatchIt, twang, WeightIt, haven, dpm, 
               ggplot2, nlme, MuMIn, RStata, readxl, glmnet, randomForest, DoubleML, mlr3, 
               mlr3learners, mlr3tuning, data.table, sjlabelled, ranger, cem, rlang, purrr, data.table, optmatch)

```

## 0: Creating variables.

### 0.1: Loading data.

```{r}

# Load Stata files.
ukhls_ind <- read_dta("indlongfile.dta")
ukhls_hh <- read_dta("hhlongfile.dta")

ls(ukhls_ind)

# Merge Stata files.
ukhls <- inner_join(ukhls_ind, ukhls_hh, by = c("hidp", "wave"))

# Reformat combined file so that it can be saved as a Stata file.
# I'm doing this because a Stata file can be opened in Stata (obviously) and in R. Also, the original data is in Stata format.
vars_with_periods <- function(data) {
  col_names <- names(data)
  vars_with_periods <- col_names[grep("\\.", col_names)]
  return(vars_with_periods)
}

vars_with_periods(ukhls)

remove_periods <- function(data) {
  col_names <- names(data)
  new_col_names <- gsub("\\.", "", col_names)
  names(data) <- new_col_names
  return(data)
}

ukhls <- remove_periods(ukhls)
vars_with_periods(ukhls)

write_dta(ukhls, "ukhls.dta")

View(ukhls)

```

Confirming panel data structure.

```{r}

# Confirm that individual ID and time variable uniquely identify observations.
isid(ukhls, vars = c("pidp", "wave"), verbose = FALSE)

# Convert to panel format.
ukhls <- panel_data(ukhls, id = pidp, wave = wave)

```

### 0.2: Creating general control variables.

```{r}

# Age. Sex.

ukhls <- ukhls %>%
  filter(age_dv >= 0 & sex_dv >= 0)

summary(ukhls$sex_dv)
ukhls$female[ukhls$sex_dv == 2] <- 1
ukhls$female[ukhls$sex_dv == 1] <- 0
summary(ukhls$female)

# Education - degree. Education - high school.
summary(ukhls$hiqual_dv)

ukhls <- ukhls %>%
  mutate(ed_degree = ifelse(hiqual_dv %in% c(1, 2), 1, 0)) %>%
  mutate(ed_hs = ifelse(hiqual_dv %in% c(1, 2, 3, 4, 5), 1, 0))

summary(ukhls$ed_degree)
summary(ukhls$ed_hs)

# Any children.
summary(ukhls$nchild_dv)

ukhls <- ukhls %>%
  mutate(any_children = ifelse(nchild_dv >= 1, 1, 0))

summary(ukhls$any_children)

# Disability status. Skipping for now because not sure how to make comparable.

# Urban/rural. 
summary(ukhls$urban_dv)
ukhls <- ukhls %>%
  filter(urban_dv >= 0) %>%
  mutate(urban = ifelse(urban_dv == 1, 1, 0))
summary(ukhls$urban)

# Disposable income.
summary(ukhls$fimnnet_dv)

ukhls$disp_inc <- (ukhls$fimnnet_dv)*12
ukhls$disp_inc[ukhls$disp_inc <= 0] <- 0
summary(ukhls$disp_inc)
ukhls$disp_inc_untransformed <- ukhls$disp_inc
ukhls$disp_inc <- asinh(ukhls$disp_inc)
hist(ukhls$disp_inc)

# More detailed sexuality.
ukhls <- ukhls %>%
  mutate(sexor_det = case_when(
    sexuor <= -2 ~ 0,
    sexuor == 1 ~ 1, # Not LGB
    sexuor == 2 & female == 0 ~ 2, # Gay
    sexuor == 2 & female == 1 ~ 3, # Lesbian
    sexuor == 3 & female == 0 ~ 4, # Bisexual man
    sexuor == 3 & female == 1 ~ 5, # Bisexual woman
    sexuor == 4 ~ 6, # Other
    sexuor == -1 ~ 7, # Unsure/don't know
    sexuor == 5 ~ 8, # Prefer not to say
    TRUE ~ NA_integer_))

ukhls <- ukhls %>%
  mutate(q_man = ifelse(sexor_det %in% c(2, 4), 1, 0)) %>%
  mutate(q_woman = ifelse(sexor_det %in% c(3, 5), 1, 0))

table(ukhls$sexor_det)

# Creating a variable that equals 1 if someone is coupled and 0 if not.
summary(ukhls$marstat)

# Marital status.
ukhls <- ukhls %>%
  mutate(married = ifelse(marstat %in% c(2, 4), 1, 0)) %>%
  mutate(coupled = ifelse(marstat %in% c(2, 3, 4), 1, 0))
summary(ukhls$married)
summary(ukhls$coupled)

# Immigrant.
summary(ukhls$plbornc)
ukhls <- ukhls %>%
  mutate(immigrant = ifelse(plbornc > 0, 1, 0))
summary(ukhls$immigrant)

# Ethnicity.
summary(ukhls$ethn_dv)

ukhls <- ukhls %>%
  mutate(is_white = ifelse(ethn_dv %in% c(1, 2, 3, 4), 1, 0))
summary(ukhls$is_white)

```

### 0.3: Poverty-line variable.

```{r}

# Number of people in the income unit.

# Need to count the number of people in an income unit.
View(ukhls)

# Convert household ID variable to numeric.
ukhls$hidp <- as.numeric(ukhls$hidp)

# Count number of income units in each household.
ukhls <- ukhls %>%
  group_by(wave, hidp) %>%
  mutate(num_inc_units = n_distinct(buno_dv)) %>%
  ungroup()

summary(ukhls$num_inc_units) # Just one income unit per household on average.

# Count number of people in each income unit in each household.
ukhls <- ukhls %>%
  group_by(hidp, wave, buno_dv) %>%
  mutate(inc_unit_members = n_distinct(pidp)) %>%
  ungroup()

summary(ukhls$inc_unit_members) # Number of people in shared income unit. Note: this data starts at 15, so I'll add children under 16 separately.

summary(ukhls$age_dv)

# As a proxy for dependent children, I use the number of own resident children under 15.

summary(ukhls$nchild_dv)

# For couples, I take the higher value of number of own resident children.
# For individuals, I use the existing value for number of own resident children.
ukhls <- ukhls %>%
  group_by(wave, hidp, buno_dv) %>%
  mutate(inc_unit_size = max(nchild_dv) + inc_unit_members)

summary(ukhls$inc_unit_size) # Just confirming results! Looks good.

# Identifying total disposable income per income unit.
ukhls <- ukhls %>%
  group_by(hidp, wave, buno_dv) %>%
  mutate(total_disp_inc = sum(disp_inc_untransformed, na.rm = TRUE)) 

summary(ukhls$total_disp_inc)

# Calculating poverty line.
ukhls <- ukhls %>%
  group_by(wave, inc_unit_size) %>%
  mutate(group_med_inc = median(total_disp_inc, na.rm = TRUE),
         poverty_line = group_med_inc * 0.6)

summary(ukhls$group_med_inc)
summary(ukhls$poverty_line)

n_distinct(ukhls$group_med_inc)
n_distinct(ukhls$poverty_line)
summary(ukhls$group_med_inc)
summary(ukhls$poverty_line)

# Above/below poverty line.
ukhls <- ukhls %>%
  mutate(in_poverty = ifelse(total_disp_inc <= poverty_line, 1, 0))

summary(ukhls$in_poverty)


```

### 0.4: Sexuality-related variables.

```{r}

# Removing people whose value for sexuality is always missing.
ukhls <- ukhls %>%
  group_by(pidp) %>%
  filter(!all(is.na(sexuor))) %>%
  ungroup()

summary(ukhls$sexuor)

# All LGB. 

# Gay, lesbian, queer man, queer woman. 

# Removing people with missing sexuality information.

# Change in sexuality, e.g. sexual fluidity.

# Creating variables for:
# (a) whether someone has ever identified as LGB, 
# (b) a version of our LGB variable that assumes someone's sexuality stays the same until they tell us otherwise, and 
# (c) two measures of how many waves someone has identified as LGB (using both our "LGB only in the wave they say so" and "LGB until say otherwise approaches").

ukhls <- ukhls %>%
  group_by(pidp) %>% # Grouping by unique, cross-wave identifier. 
  arrange(wave) %>% # Arranging in order of wave.
  mutate(sexor_binary = ifelse(is.na(sexor_det), NA, ifelse(sexor_det %in% c(2, 3, 4, 5), 1, 0)), # sexor_binary is 1 if someone is LGB, 0 otherwise.
         sexor_binary_2 = na.locf(sexor_binary, na.rm = FALSE, fromLast = TRUE), # sexor_binary_2 is 1 if someone is LGB and then stays 1 until they tell us otherwise.
         ever_lgb = max(sexor_binary, na.rm = TRUE), # ever_lgb is 1 (in ALL waves) if someone ever identifies as LGB.
         num_waves_lgb = sum(sexor_binary, na.rm = TRUE), # num_waves_lgb is how many waves someone EXPLICITLY identifes as LGB.
         num_waves_lgb_2 = sum(sexor_binary_2, na.rm = TRUE)) # num_waves_lgb_2 is how many waves someone is LGB based on sexor_binary_2, which means we are assuming people who've said they are LGB remain LGB until they tell us otherwise.

summary(ukhls$sexor_binary)
summary(ukhls$sexor_binary_2)
summary(ukhls$ever_lgb)
summary(ukhls$num_waves_lgb)
summary(ukhls$num_waves_lgb_2)

ukhls <- ukhls[complete.cases(ukhls$sexor_binary_2), ]
summary(ukhls$wave)

# change_lgb equals 1 in all waves if sexor_det ever changed, 0 otherwise.
ukhls <- ukhls %>%
  group_by(pidp) %>%
  mutate(change_lgb = ifelse(any(n_distinct(na.omit(sexor_det)) > 1, na.rm = TRUE), 1, 0))
summary(ukhls$change_lgb)

# change_lgb_2 equals 1 in all waves if sexor_binary ever changed, 0 otherwise.
ukhls <- ukhls %>%
  group_by(pidp) %>%
  mutate(change_lgb_2 = ifelse(any(n_distinct(na.omit(sexor_binary)) > 1, na.rm = TRUE), 1, 0))
summary(ukhls$change_lgb_2)

# Confirming these variables look as I'd expect them to (note: hard to directly interpret).   
summary(ukhls$sexor_binary) # E.g., this tells us that 2% of observations are LGB without considering that distinct observations represent the same person in different years.
summary(ukhls$sexor_binary_2)
summary(ukhls$ever_lgb)
summary(ukhls$num_waves_lgb)
summary(ukhls$num_waves_lgb_2)

# Calculating the average number of waves someone identified as LGB if they identifed as LGB at all.
avg_waves_lgb <- ukhls %>%
  group_by(pidp) %>%
  filter(ever_lgb == 1) %>%
  pull(num_waves_lgb_2) %>%
  mean(na.rm = TRUE)
avg_waves_lgb 
# If someone identified as LGB, they, on average, identified as LGB for 3.18 waves.

```

### 0.5: Employment-related variables.

```{r}

# Currently unemployed.

# Ever unemployed.

# Waves and spells unemployed.

table(ukhls$jbstat)

# Employed/unemployed binary variable.
ukhls$unemployed <- ifelse(ukhls$jbstat == 3, 1, 0)
ukhls <- ukhls %>%
  group_by(pidp) %>%
  mutate(unemployed_lagged = lag(unemployed, default = first(unemployed))) %>%
  ungroup()

summary(ukhls$unemployed)
summary(ukhls$unemployed_lagged) 

# Ever unemployed.
ukhls <- ukhls %>%
  group_by(pidp) %>% # Grouping by unique, cross-wave identifier. 
  arrange(wave) %>% # Arranging in order of wave.
  mutate(ever_unemployed = max(unemployed, na.rm = TRUE), # ever_unemployed is 1 (in ALL waves) if someone is ever unemployed.
         num_waves_unemployed = sum(unemployed, na.rm = TRUE)) # num_waves_unemployed is how many waves someone is EXPLICITLY recorded as unemployed.

summary(ukhls$unemployed)
summary(ukhls$ever_unemployed)
summary(ukhls$num_waves_unemployed)

# Calculating the average number of waves someone was unemployed if they were ever unemployed at all.
avg_waves_unemployed <- ukhls %>%
  group_by(pidp) %>%
  filter(ever_unemployed == 1) %>%
  pull(num_waves_unemployed) %>%
  mean(na.rm = TRUE) # If someone is unemployed, they, on average, were unemployed for 2.07 waves.
avg_waves_unemployed

# Number of unemployment spells.
# It equals the number of times a person has been unemployed. If someone is unemployed in one wave and remains unemployed in the next wave, it's counted as the same spell. If someone has a period of employment, or exiting the labor market, that interrupts two periods of unemployment, then those two periods of unemployment are counted as two separate spells.
ukhls <- ukhls %>%
  arrange(pidp, wave) %>%  # Make sure the data is sorted by pidp and wave
  group_by(pidp) %>%
  mutate(spell_id = cumsum(c(1, diff(unemployed) != 0))) %>%
  group_by(pidp, spell_id, add = TRUE) %>%
  mutate(num_spells_unemployed = sum(unemployed)) %>%
  ungroup()
summary(ukhls$num_spells_unemployed)

# Calculating the average number of unemployment spells if someone was ever unemployed at all.
avg_spells_unemployed <- ukhls %>%
  group_by(pidp) %>%
  filter(num_spells_unemployed > 0) %>%
  pull(num_spells_unemployed) %>%
  mean(na.rm = TRUE) # If someone is unemployed, they, on average, were unemployed for 2.399179 waves.
avg_spells_unemployed

```

Preliminary descriptive statistics.

```{r}

# Calculating the proportion of people who ever identified as LGB.

# Identifying unique observations in the data set.
unique_individuals <- ukhls %>%
  distinct(pidp)

# Creating a matrix containing two variables, xwavedid and ever_lgb. Calling it ever_matrix because I'm planning to add variables to the same matrix for a similar calculation about unemployment.
ever_matrix <- ukhls %>%
  arrange(pidp, wave) %>%  # Make sure the data is sorted by pidp and wave
  group_by(pidp) %>%
  mutate(spell_id = cumsum(c(1, diff(unemployed) != 0))) %>%
  group_by(pidp, spell_id, add = TRUE) %>%
  mutate(num_spells_unemployed = sum(unemployed)) %>%
  ungroup() %>%
  group_by(pidp) %>%
  summarise(ever_lgb = max(ever_lgb, na.rm = TRUE),
            ever_change_lgb = max(change_lgb, na.rm = T),
            ever_change_lgb_2 = max(change_lgb_2, na.rm = T),
            ever_unemployed = max(unemployed, na.rm = TRUE),
            num_waves_unemployed = sum(unemployed, na.rm = TRUE),
            num_spells_unemployed = max(num_spells_unemployed, na.rm = TRUE)) %>%
  ungroup()

identical(ever_matrix$num_spells_unemployed, ever_matrix$num_waves_unemployed) # Just confirming that num_spells_unemployed is indeed different than number of waves unemployed.

# Dividing the number of people who've ever identified as LGB by the total number of people.
proportion_ever_lgb <- mean(ever_matrix$ever_lgb == 1, na.rm = TRUE)
proportion_ever_lgb

# Calculating the proportion of people who ever CHANGED their LGB identification using sexor_det.
proportion_ever_change_lgb <- mean(ever_matrix$ever_change_lgb == 1, na.rm = TRUE)
proportion_ever_change_lgb

# Calcuating the proportion of people who ever CHANGED their LGB identification using sexor_binary. These are people who moved into or out of identifying as LGB.
proportion_ever_change_lgb_2 <- mean(ever_matrix$ever_change_lgb_2 == 1, na.rm = TRUE)
proportion_ever_change_lgb_2

```

Adding disability variable.

```{r}

# Removing variables I won't need.
ukhls <- ukhls %>%
  select(-contains("benbase"))

# Creating disability index and then removing additional disability variables.
dis_vars <- c("disdif1", "disdif2", "disdif3", "disdif4", "disdif5", "disdif6",
               "disdif7", "disdif8", "disdif9", "disdif10", "disdif11", "disdif12")

# Replace negative values with 0
ukhls[dis_vars] <- lapply(ukhls[dis_vars], function(x) ifelse(x < 0, 0, x))

# Create a new binary variable
ukhls$disabled <- as.integer(rowSums(ukhls[dis_vars] >= 1) > 0)

summary(ukhls$disabled)


```

### 0.6: Saving data set with transformed variables, re-loading.

```{r}

save(ukhls, file = "ukhls.RData")
write_dta(ukhls, path = "stata_ukhls.dta")

```
